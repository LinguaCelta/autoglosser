#/* 
#*********************************************************************
#Copyright Kevin Donnelly 2010, 2011.
#kevindonnelly.org.uk
#This file is part of the Bangor Autoglosser.
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License and the GNU
#Affero General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option)
#any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#and the GNU Affero General Public License along with this program.
#If not, see <http://www.gnu.org/licenses/>.
#*********************************************************************
#*/ 

DELIMITERS = "<.>" "<!>" "<?>";

LIST noun = n;
LIST verb = v;
LIST infinitive = (v infin);
SET inflected = (v) - (infin);  # ie the set of all verbs, minus the set of all infinitives; note that you cannot use LIST here
LIST preposition = p;
LIST pronoun = r;
LIST interrogative = part-int;
LIST adjective = a adj;
LIST adverb = b;
LIST conjunction = c;
LIST prequal = "ofnadwy" "andros" "tipyn";
LIST softprep = "o" "i" "am" "ar" "wrth" "dan" "heb";
LIST concessive = "oh" "well";
LIST exclamation = e;
LIST interjection = i;
LIST phrase = h;
LIST placename = pn;

LIST initvowel = "a.*"ri "e.*"ri "i.*"ri "o.*"ri "u.*"ri "w.*"ri "y.*"ri;

LIST amvinf = (vinf am);
LIST smvinf = (vinf sm);

LIST amnoun = (n am);
LIST nmnoun = (n nm);
LIST smnoun = (n sm);

LIST possessive = ("ei" :her:) ("ei" :his:);

LIST modal = "licio" "gobeithio" "gallu";

LIST countable = "munud" "ceiniog";

#SET amvnoun = amvinf or amnoun;
# note use of "or" (|) above; "and" (+) does not work because it yields all possible combinations of the elements in the two sets; since the n and vinf tags will never occur together, the set will never be valid; the following has the same effect:
LIST amvnoun = (vinf am) or (n am);


SECTION

##### Rules for Welsh #####

# Mutations

remove (sm) if (-1 (t)) (0 (n m));

remove (am) if ( (not -1 ("â")) or (not -1 ("gyda")) or (not -1 ("ni")) );

remove (h) if ( (not -1 ("ei" :her:)) or (not -1 ("ein" :our:)) );

# Particles

select interrogative if (@1 ("a")) (@-1 ("<?>"));
select ("na" b) if (@1 ("na"));
select ("na" b) if (-1 concessive);
select ("na" b) if (1 inflected);
select ("na" c :\(n\)or:) if (1 (am));

select ("yn" s) if ( (1 infinitive) or (1 adjective) or (1 adverb) or (1 noun + (sm)) );

select ("y" t) if (not 1 inflected);

select ("ddim" b) if (-1 pronoun) (-2 inflected)
select ("ddim" b) if (-1 inflected);
select ("dim" b) if (1 noun or infinitive);
select ("dim" b) if (1 ("yn" s)) (2 infinitive);
select ("dim" b) if (1 (name));

select ("mor" :so:) if (not 2 ("â" c));
select ("mor" a) if (2 ("â" c));

select ("â" c) if (-2 ("mor" a));
#select ("â" p) if (not -2 ("mor" a));

select ("cyn" p) if (1 infinitive);

select ("ynte" b) if (1 ("<?>"));

select ("do" b) if (1 ("<.>"));
select ("do" b) if (1 ("<?>"));

remove ("ni" part-neg) if (not 1 inflected);

select ("beth" i) if (1 inflected);

select ("fe" x) if (1 inflected);


# Conjunctions

select ("a" c) if (-1 (name)) (1 (name));
select ("a" c) if (not 1 (@1));


# Interrogatives

select ("beth" i) if (1 ("am" p));


# Prepositions

select (sm) if (-1 softprep);

select ("yn" p) if (1 (t));
select ("yn" p) if (1 (r));
select ("yn" p) if ( 1 ("ystod") or ("ymyl") );
select ("yn" p) if (1 (name));

select ("wedi" p) if (1 (infin));

#select ("i" p) if (1 (sm));
select ("i" p) if (not -1 inflected);

#select ("o" :of:) if (-1 prequal) (1 adjective);
select ("o" :of:) if (-1 prequal or ("maint"));
select ("o" :of:) if (-2 ("ychydig"));
#select ("o" :of:) if (not 1 (name));  # far too broad
select ("o" :from:) if (1 ("nos" :night:));
select ("o" :of:) if (1 ("blaen" sm));
select ("o" :of:) if (-1 ("chwech" a));  # needs to be generalised to all numbers by retagging them as "num", not "a"
select ("o" :of:) if (1 infinitive + (sm));
select ("o" :from:) if (1 (name));

select ("allan" b) if (-1 ("sefyll") or ("mynd"));


# Pronouns

select ("i" r) if (-1 ("bod" 1s pres spoken));
select pronoun if (-1 inflected);
#select pronoun if (-1 infinitive);

select pronoun if ( (-2 possessive) or (-3 possessive) );
select pronoun if (-1 preposition);

select ("ei" :his:) if (1 (sm));

select ("ei" :his:) if (1 (sm));
select ("ei" :his:) if (1 initvowel) (not 1 (h));

select ("ni" :we:) if (not 1 (inflected));

#remove ("fo") if (not -1 (v)) (not -1 (n));
select ("fo" [cy] r m s :he:) if (-1 (v 3s));

# Nouns

remove nmnoun if (not -1 ("yn" "fy"));
select noun if (-1 ("y" t));

select ("ystod" :range:) if (-1 ("yn" p));

select ("ysgol" :school:) if (-1 ("y" t)) (-2 ("yn" p));
select ("ysgol" :school:) if (1 ("uwchradd") or ("Cymraeg") or ("dyddiol"));

select ("dim" n) if (-1 (p));

select ("gwaith" :work:) if (-1 ("o" :of:));
select ("gwaith" :work:) if (-1 ("codi" :lift:));

select ("diolch" n) if (-1 ("dweud" infinitive));

select ("man" :place:) if (1 ("acw" b) or ("hyn" r));

select ("Mawrth" :March:) if (-1 ("mis" n));
select ("Mawrth" :Tuesday:) if (-1 ("nos" n));
select ("Mercher" :Wednesday:) if (-1 ("nos" n));

select ("ymarfer" n) if (-1 ("angen" n));

select ("Cymraeg" n) if (-1 ("siarad") or ("o") or ("dim") or ("yn"));
select ("Cymraeg" a) if (-1 noun);

select ("math" [cy] n) if (1 ("â" [cy] p));  # fath â - the same as
select("â" [cy] c)  if (-1 ("math" [cy] n));


# Adjectives

select ("ei" a :her:) if (1 amvnoun);
select ("ei" a :his:) if (1 smnoun);
select ("ei" a :his:) if (1 (i)) (2 smnoun);
select ("ei" a :her:) if (1 noun) (2 ("hi" r));
select possessive if (1 noun);

select ("iawn" :OK:) if (-1 ("yn" s));
select ("iawn" :OK:) if (-1 concessive);
select ("iawn" :OK:) if (@1 ("iawn")) (@-1 ("<.>"));
select ("iawn" :very:) if (-1 adjective);

select ("deg" :ten \(10\):) if (1 countable);

select ("unig" a :only:) if (-1 (t));

# Verbs

select ("bod" fut) if (not 1 ("yn" s));
select ("bod" 3p pres) if (1 pronoun);
select ("bod" infinitive) if (-1 ("heb" p));
select ("bod" vfle pres) if (0 ("<oes>")) (1 ("<.>"));

select infinitive if (-1 ("yn" s));
select (infinitive sm) if (-1 ("i" r));  # dw i meddwl
select infinitive if (-1 possessive);
select infinitive if (-1 modal);
select infinitive if (-1 preposition);
select infinitive if (-1 ("bod" vfle));
select infinitive if (1 ("<.>"));
#select inflected if (1 ("<.>"));
select infinitive if (-1 pronoun);
select infinitive if (-1 ("<sy>"));
select inflected if (1 pronoun);
select (1p) if (1 ("ni" r));

select (imper) if (not @1 ("ni"));

remove inflected if (not 1 pronoun);
remove inflected if (-1 infinitive) (0 (v));


#Adverbs

select ("allan" b) if (-1 ("pell"));

select ("iawn" :OK:) if (not -1 adjective);


# Global rules

# 1- homonym selection - has the effect of "deleting" items from the dictionary
select ("gofyn" :ask:);
select ("cyrraedd" :arrive:);
select ("rhyw" :some:);
select ("cyfeiriad" :direction:);
select ("mynd" vfle 1p pres);
select ("darn" :pieces:);
select ("aros" :wait:);
select ("tynnu" :drag:);
select ("hanes" :story:);
select ("ysgol" :school:);
select ("trefnu" :arrange:);
select ("wrth" :by:);
select ("fel" :like:);
select ("be" :what:);
select ("sôn" v);
select ("ymyl" :edge:);

#remove (v subj);
remove ("fod" c :that:);
remove ("cael" :get:);
remove ("gwadu" vfle sm 2s pres);
remove ("meddu" vfle 3s imperf);
remove ("tebygol" a sm :probable:);
#remove ("gyrru" v 3s pres :drive:);
#remove ("gyrru" v 2s imper :drive:);
remove ("ban" :peak:);


# 2 - delete archaic forms
remove (archaic);


##### Rules for Spanish #####


# Articles

select ("el"  det.def) if (1 (n f) or (adj f) or (ord f));
select ("el"  det.def) if (1 (n m) or (adj m) or (ord m));
select (det.def) if (-1 ("de" prep :of:));

select ("uno" [es] det.indef) if (1 (n f) or (adj f) or (ord f));
select ("uno" [es] det.indef) if (1 (n m) or (adj m) or (ord m));


# Conjunctions

select ("así" adv) if (1 (vfle));
select ("que" :which:) if (not -1 (adjective));


# Prepositions

select ("para" [es] prep :for:) if (1 (prn.obj) or  (v infin) or ("que" conj :which:) or (det.def));
select ("entre" [es] prep :between:) if (not 1 ("en"));
select ("como" [es] prep :like:) if (1 (prn.subj) or ("que" conj :which:));


# Nouns

select (n m sg) if (-1 ([es] det.def m sg) or ([es] det.indef m sg));
remove (n m sg) if (not -1 ([es] det.def m sg) or ([es] det.indef m sg));
select (n m pl) if (-1 ([es] det.def m pl) or ([es] det.indef m pl));
select (n f sg) if (-1 ([es] det.def f sg) or ([es] det.indef f sg));
select (n f pl) if (-1 ([es] det.def f pl) or (det.indef f pl));
select ("gusto" n) if (-1 ("mucho" adj));
select (n) if (1 ("del"));
select ("casa" n f sg :house:) if (-1 (prep));


# Demonstratives

select ("este" adj.dem m sg) if (1 (n m sg));


# Pronouns

select (prn.refl) if (1 (v 3s) or (v 13s) or (v 3p));
select ("él" [es] prn.obj) if (1 (v));
select ("otro" prn) if (not 1 (n));
select ("uno" [es] prn) if (1 ("de"));
select ("todo" prn) if (1 (v));
select ("temprano" adv) if (-1 ("muy"));
select (prn.obj) if (1 ("que" conj :which:));

# Adjectives

select ([es] adj m sg) if (-1 ([es] n m sg));
select ("mucho" adj) if (1 (n m sg));
select ("tarde" n) if (-1 (det.def));
select ("mejor" adj) if (1 (n));
select ("todo" [es] adj) if (1 (det.def));

#  Verbs

select (pastpart) if (-1 ("haber"));
select ("ser" [es] v 13s imperf :be:) if (not 1 (v));
select ("ser" [es] v 3s past :be:) if (not 1 (preposition));
select (v 3s pres) if (-1 ("donde" rel :where:));
select (v infin) if (-1 ("para" [es] prep :for:));
remove ([es] v imper) if (-1 ("estar" [es] v));


# Global rules

# 1- remove less common tenses - has the effect of "deleting" items from the dictionary
select (v 3s pres);
