#/* 
#*********************************************************************
#Copyright Kevin Donnelly 2010, 2011.
#kevindonnelly.org.uk
#This file is part of the Bangor Autoglosser.
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License and the GNU
#Affero General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option)
#any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#and the GNU Affero General Public License along with this program.
#If not, see <http://www.gnu.org/licenses/>.
#*********************************************************************
#*/ 

#  General notes
#  Combining or and not will not necessarily work: select (x) if (1 y) or (not 1 z) does not fire properly
#  If the tag substitution for English uses dotted notation, none of the other rules will bite, because they are all using spaced notation.
#  You can't combine conditions applying to adj -1 position OR adj 1 position.
#  Substitute lines have to be in order of greatest number of tags in the match section, otherwise rules will fire on some tags, and change the tags so that the larger match never matches.  For instance: sv infin pv.

DELIMITERS = "<.>" "<!>" "<?>";

LIST noun = n;
LIST verb = v;
LIST infinitive = (v infin);
SET inflected = (v) - (infin);  # ie the set of all verbs, minus the set of all infinitives; note that you cannot use LIST here
SET non_imper = (v) - (imper);
LIST preposition = prep;
SET pronoun = ([cy] pron);
LIST adjective = adj;
LIST adverb = adv;
LIST conjunction = conj;
LIST concessive = "oh" "well" "wel";
LIST exclamation = im;
LIST interrogative = im;
LIST phrase = h;
LIST placename = pn;

LIST preverbal = "<just>" "<actually>" "<still>" "<even>" "<like>" "<already>" "<first>";
LIST auxiliary = "be" "have" "do" "can";

LIST initvowel = "a.*"ri "e.*"ri "i.*"ri "o.*"ri "u.*"ri "w.*"ri "y.*"ri;
LIST amvinf = (v infin am);
LIST smvinf = (v infin sm);
LIST amnoun = (n am);
LIST nmnoun = (n nm);
LIST smnoun = (n sm);
LIST possessive = ("ei" :her:) ("ei" :his:);
LIST modal = "licio" "gobeithio" "gallu";
LIST countable = "munud" "ceiniog";
LIST quantifier = "ofnadwy" "andros" "tipyn" "lot";
LIST softprep = "o" "i" "am" "ar" "wrth" "dan" "heb";
LIST language = "Cymraeg" "Sbaeneg" "Sbanish" "Saesneg";

#SET amvnoun = amvinf or amnoun;
# note use of "or" (|) above; "and" (+) does not work because it yields all possible combinations of the elements in the two sets; since the n and vinf tags will never occur together, the set will never be valid; the following has the same effect:
LIST amvnoun = (vinf am) or (n am);


SECTION


##### Rules for Welsh #####


# Global rules

# 1- homonym selection - has the effect of "deleting" non-selected items from the dictionary
select ("archwilio" [cy] :inspect:);
select ("awyren" [cy] :aeroplane:);
select ("aros" [cy]  :wait:);
select ("bach" [cy] :smaller:);
select ("be" [cy] :what:);
select ("codi" [cy] :lift:);
select ("coll" [cy] :missing:);
select ("cwmpas" [cy] :round:);
select ("cychwyn" [cy] :start:);
select ("cyfeiriad" [cy] :direction:);
select ("cyfuno" [cy] :combine:);
select ("cymaint" [cy]  :so much:);
select ("cynt" [cy] adj);
select ("cyrraedd" [cy] :arrive:);
select ("darn" [cy] :pieces:);
select ("diddymu" [cy] :abolish:);
select ("draw" :yonder:);
select ("dweud" [cy] :say:);
select ("dychryn" [cy] :frighten:);
select ("eto" [cy] adv);
select ("fel" [cy] :like:);
select ("ffug" [cy] :false:);
select ("gofyn" [cy] :ask:);
select ("golwg" [cy]  :view:);
select ("gwaith" [cy] :times:);
select ("gweddi" :prayer:);
select ("gŵr" [cy] :man:); 
select ("hanes" [cy] :story:);
select ("llawr" [cy] :floor:);
select ("llydan" [cy] :wide:);
select ("modd" [cy] :means:) if (not -2 ("wrth" prep)) (not -1 (adj.poss));
select ("mynd" v 1p pres);
select ("porth" [cy] :port:);
select ("pwys" [cy] :weight:);
select ("rhannu" [cy] :divide:);
select ("rhedeg" [cy] :run:);
select ("rhewi" [cy] :freeze:);
select ("rhyw" [cy] :some:);
select ("rhywfaint" [cy] :amount:);
select ("sôn" [cy] v);
select ("trefnu" [cy] :arrange:);
select ("tros" adv :over:);
select ("tros" prep :over:);
select ("tua" [cy] :towards:); 
select ("tynnu" [cy] :take:);
select ("tynnu" [cy] :draw:);
select ("wrth" [cy] :by:);
select ("ymyl" [cy] :edge:);
select ("ysgol" [cy] :school:);
select ("ysgol" [cy] :schools:);
select ("ymlaen" [cy] :forward:);


# 2 - removal of less common items
remove (v subj);  # na ddefnyddio - CHECK: may be too broad
remove ("ban" [cy] :peak:);
remove ("cael" [cy] :get:);  # to leave "have"
remove ("cynio" [cy] :gouge:);
remove ("cynnu" [cy] :light:);
remove ("fod" [cy] conj :that:);
remove ("gallu" n :capacity:);
remove ("gwadu" [cy] :deny:); 
#remove ("gwadu" v sm 2s pres);
remove ("gwelwi" [cy] :dim:);
#remove ("gyrru" v 3s pres :drive:);
#remove ("gyrru" v 2s imper :drive:);
remove ("hogi" [cy] :whet:);
remove ("huno" [cy] :sleep:); 
remove ("meddu" v 3s imperf);
remove ("naddu" v :carve:);
remove ("nosi" v :become_night_:);
remove ("pallu" v :refuse:);
remove ("tebygol" a sm :probable:);
remove ("tasu" [cy] :stack:); 
remove ("toi" [cy] :roof:); 


# 3 - delete archaic forms
remove (archaic);


# Mutations

remove (sm) if (-1 (det.def)) (0 (n m));
remove (am) if ( (not -1 ("â")) or (not -1 ("gyda")) or (not -1 ("ni")) );
remove (h) if ( (not -1 ("ei" :her:)) or (not -1 ("ein" :our:)) );

remove ([cy] "gan" prep sm);  # yn<gyn
remove ([cy] "gan" prep+pron sm);  # sm forms are already listed separately; we need canddo for formal Welsh a chanddo, though, so retain it in the dictionary
remove ([cy] "ger" prep sm);  # er<ger
remove ([cy] "mo" adv sm);  # fo<mo
remove ([cy] "ôl" adj h);  # hôl<ôl
remove ([cy] "taw" conj sm);  #daw<taw
remove ([cy] "go" adv sm);  #o<go
remove ([cy] "mi" prt sm);  #fi<mi
remove ([cy] "un" num h);  #hun<un
remove ([cy] "be" int sm);  #fe<be
remove ([cy] "da" adj nm);  # na<da
remove ([cy] "bod" v 3s subj.past nm);  # mai<bai
remove ([cy] "dod" v 3s pres nm);  # naw<daw
remove ([cy] "mynd" v 2s imper nm);  # nos<dos
remove ([in] "gum" n sg sm);  # um<gum
remove ([cy] "a" h);  # ha<a
remove ([cy] "cyn" prep sm);  # gyn<cyn


# Forms that need handling first because of sequence clashes
select ([cy] "ifanc" adj.comp) if (-1 (n));  # crew iau

select ([cy] "fy" adj.poss) if (1C (nm)) (not 1 (name));  # y ngweld  # C means has to be nm only - probably won't work if there is more than one reading, one of which is nm


# Particles

select interrogative if (@1 ("a")) (@-1 ("<?>"));

#select ([cy] "na" prt) if (@1 ("na"));
select ([cy] "na" prt) if (-1 concessive);  # wel na
select ([cy] "na" pron.rel.neg) if (1 (v past am));  # dyn na chofies i erioed
select ([cy] "na" pron.rel.neg) if (1 (v past sm));  
select ([cy] "na" prt) if (-1 (>>>));  # na.
select ([cy] "na" prt) if (not *-1(adj.comp)) (1 ([cy] "na" prt));  # na na
select ([cy] "na" prt) if (1 ("<.>") or ("<!>") or ("<?>"));
select ([cy] "na" prt) if (1 ([cy] "bod" v));  # na oeddwn
select ([cy] "na" prt) if (1 ([cy] v pres));  # na fedri
select ([cy] "na" prt) if (-1 ([cy] "na" prt));  # na na

select ([cy] "na" conj :\(n\)or:) if (1 (n am));
select ([cy] "na" conj :\(n\)or:) if (1 ("byd" adv :anything:));  # na ddim_byd
select ([cy] "na" conj :\(n\)or:) if (1 ([cy] v infin));  # nôl coed tân na sefyll yn tŷ

select ([cy] "na" conj :than:) if (-1 ([cy] adj.comp)) (1 ([cy] pron) or ([cy] n) or ([cy] adj.poss));  # mwy na fi, wanach na mam, yn bellach na'i trwyn
select ([cy] "na" conj :than:) if (1 ([cy] "y" det.def));  # nes i_lawr na'r hosbital
select ([cy] "na" conj :than:) if (*-1 (adj.comp));  # well ffordd na

remove ([cy] "ni" prt) if (not 1 inflected);

select ([cy] "mi" prt) if (1 (v past) or (v pres) or (v fut) or (v imperf) or (v pluperf));  # mi ddoth, mi ddaw, mi fydd, mi oedd
remove ([cy] "mi" prt) if (not 1 (v past) or (v pres) or (v fut) or (v imperf) or (v pluperf));  # mi ddoth, mi ddaw, mi fydd, mi oedd

select ([cy] "yn" stat) if (1 (infin) or (adj) or (adj.comp) or (adv) or (quan sm) or ("gor" prt));  # yn ddigon, yn or hapus
select ([cy] "yn" stat) if (1 (n sm)) (not 1 language);  # !yn Gymraeg
select ([cy] "yn" stat) if (1 ("digon")) (2([cy] adj));  # required in light of above?
select ([cy] "yn" stat) if (1 ([cy] adj.poss)) (2 ([cy] v infin));
select ([cy] "yn" stat) if (1 ([cy] num));  # yn undeg tri
select ([cy] "yn" stat) if (1 ([in] n));  # yn job

select ([cy] det.def) if (not 1 inflected);
select ([cy] "y" pron.rel) if (1 inflected);  # fel ag yr wyt ti, sure y bydai hi

select ([cy] "dim" adv) if (-1 pronoun) (-2 inflected)
select ([cy] "dim" adv) if (-1 inflected);
select ([cy] "dim" adv) if (1 noun or infinitive);
select ([cy] "dim" adv) if (1 ("yn" stat)) (2 (v infin) or (adj));;  # ddim yn hir
select ([cy] "dim" adv) if (1 (name));
select ([cy] "dim" adv) if (1 ("jyst" adv));  # dim jyst

select ([cy] "mor" :so:) if (not 2 ("â" conj));
select ([cy] "mor" adj) if (2 ("â" conj));

select ([cy] "â" conj) if (-2 ("mor" adj));
#select ([cy] "â" prep) if (not -2 ("mor" adj));
select ([cy] "â" conj) if (-2 ([cy] "un")) (-1 ([cy] n)) (1 ([cy] pron));  # yr un ysgol â fi

select ([cy] "cyn" prep) if (1 infinitive);

select ([cy] "ynte" adv) if (1 ("<?>"));

select ([cy] "do" adv) if (1 ("<.>"));
select ([cy] "do" adv) if (1 ("<?>"));
select ([cy] "do" adv) if (-1 (>>>));  # do mi ddoth
select ([cy] "do" adv) if (-1 ("oh" im));  # oh do

select ([cy] "fe" prt.aff) if (1 inflected);


# Conjunctions

select ([cy] "a" conj) if (-1 (name)) (1 (name));
select ([cy] "a" pron.rel) if ( (1 ("piau")) or (2 ("piau")) );  # yr arglwydd a ei piau
select ([cy] "a" pron.rel) if (-1 ("pwy"));  # pwy a ŵyr
select ([cy] "a" conj) if (not 1 (@1));

select ([cy] "tra" conj) if (1 ("bod"));  # tra oedd

# Interrogatives

select ([cy] "beth" int) if (1 ("am" prep));  # beth am 
select ([cy] "beth" int) if (1 ("bynnag" adj));  # beth bynnag
select ([cy] "beth" int) if (1 ("sydd"));  # beth sydd

# Prepositions

#select (sm n) if (-1 softprep);  # CHECK - may not be sufficiently tight - not required either; other rules handle this better

select ([cy] "yn" prep) if (1 (det.def));  
select ([cy] "yn" prep) if (1 (pron) or (preq));  # yn rhyw lyfr
select ([cy] "yn" prep) if (1 ("ystod") or ("ymyl") or ("lle"));  # yn lle
select ([cy] "yn" prep) if (1 (name));
select ([cy] "yn" prep) if (1 (n nm));
select ([cy] "yn" prep) if (1 ([0]) or ("mis" [cy] n)) (2 (name));  # yn er Lomarmosa, yn mis May
select ([cy] "yn" prep) if (1 language);  # yn Gymraeg, yn Sbaeneg
select ([cy] "yn" prep) if (1 ("be" int));  # yn be

select ([cy] "wedi" prep) if (1 ([cy] v infin));  # wedi gweld

#select ([cy] "i" prep) if (1 (sm));
select ([cy] "i" pron 1s) if (-1 ([cy] "gan" prep));
select ([cy] "i" prep) if (not -1 inflected) (not -1 ("gan" prep) or (prep+pron 1s));  # CHECK: overrides select ([cy] "i" pron 1s) if (-1 ([cy] "gan" prep)); below; perhaps delete this, but check for regressions; no, keep but escape gen i
select ([cy] "i" prep) if (1 ([cy] v infin)) (-1 (v infin) or (n)) (-2 (n));  # gwaith codi i fynd
select ([cy] "i" prep) if (1 (name));  # cerdded i San_Juan

#select ([cy] "o" :of:) if (-1 quantifier) (1 adjective);
select ([cy] "o" :of:) if (-1 quantifier or ("maint") or (quan));
select ([cy] "o" :of:) if (1 (quan));  # o lawer
select ([cy] "o" :of:) if (-2 ("ychydig"));
select ([cy] "o" :of:) if (-1 ("llawr" adv));  # i_lawr o yma
#select ([cy] "o" :of:) if (not 1 (name));  # far too broad
select ([cy] "o" :of:) if (1 ("blaen" sm));
select ([cy] "o" :of:) if (1 ("y" det.def) or (adj.poss));  # o'r môr, o'n ffrindiau
select ([cy] "o" :of:) if (-1 ([cy] num)) (1 ([cy] n pl));  # dau o blant
select ([cy] "o" :of:) if (1 infinitive + (sm));
select ([cy] "o" :of:) if (1 ([cy] pron));  # neb o ni, un o nhw
select ([cy] "o" :of:) if (not -1 (v)) (1 (n));  # llawer iawn o bobl
select ([cy] "o" :of:) if (1 ("<fobl>"));  # lot o fobl (non-standard mutation)
select ([cy] "o" :of:) if (-1 ("clamp") or ("ffordd"));  # clamp o, ffordd o torri
select ([cy] "o" :of:) if (not -2 ("ei" :his:)) (-1 (name));  # Regina o
select ([cy] "o" :of:) if (-2 ("rhyw" preq)) (-1 ("math" n));

select ([cy] "o" :from:) if (1 ("nos" :night:) or ("pell") or ("cwbl")); # o bell, o gwbl
select ([cy] "o" :from:) if (1 (name) or (place) or ("yma" adv));  # o Llundain

select ([cy] "â" prep) if (1 (n) or (pron));  # aeth hi â honno
select ([cy] "â" prep) if (-1 ([cy] "peidio" v imper));  # paid â dweud, peidiwch â roi
select ([cy] "â" prep) if (-1 ([cy] "dod") or ([cy] "mynd") or ([cy] "cwrdd"));  # dod â, cwrdd â, mynd â
select ([cy] "â" prep) if (1 ("y" det.def)) (not -1 (adj.comp));  # aeth taid â'r ddwy ferch
select ([cy] "â" prep) if (-1 ("bron" adv)) (1 (v infin));  # bron â gorffen

remove ([cy] "cyn" :as:) if (not -1 ([cy] adj.eq));  

select ([cy] "gan" f 3s) if (1(pron f 3s));  # gynna hi
select ([cy] "gan" prep) if (not -1 softprep);  # gan Dean


# Pronouns

select ([cy] "mi" pron) if (-1 ("bod" 1s pres spoken));
select ([cy] "mi" pron 1s) if (-1 ([cy] "gan" prep));  # gen i - CHECK: overridden by select ([cy] "i" prep) if (not -1 inflected); above; perhaps delete that, but check for regressions - OK now
select ([cy] "mi" pron) if (-1 ("na" conj :than:));

select ([cy] pron 1s) if (-1 (v 1s)) (not -1 (infin));  # !allan i dawnsio
select ([cy] pron 1s) if (-1 (v 13s)) (not -1 (infin));  # alla i gadw hyn
select ([cy] pron 2s) if (-1 (v 2s)) (not -1 (infin));
select ([cy] pron 3s) if (-1 (v 3s)) (not -1 (infin));  # oedd o
select ([cy] pron 1p) if (-1 (v 1p)) (not -1 (infin));
select ([cy] pron 2p) if (-1 (v 2p)) (not -1 (infin));
select ([cy] pron 3p) if (-1 (v 3p)) (not -1 (infin));

select ([cy] pron) if (-1 ("bod" v infin));
select ([cy] pron) if (1 ("dim")) (2 ("moin"));  # fi ddim moin
select ([cy] pron) if ( (-2 possessive) or (-3 possessive) );
select ([cy] pron) if (-1 preposition);
select ([cy] pron) if (-1 ("isio" n)) (1 ([cy] v infin));  # isio fi mynd

select ([cy] "mi" pron 1s) if (-1 ([cy] "i" prep));  # i mi
select ([cy] "mi" pron 1s) if (-1 ([cy] prep+pron 1s));  # wrtha i
select ([cy] "mi" pron 1s) if (-1 ([cy] v infin)) (not 1 ("mi" pron) or (name) or (v infin));  # wnaeth Tomos ffonio fi, but escape: yn gofyn i mi, yn dal i ymarfer
select ([cy] "mi" pron 1s) if (1 ([cy] "yn" stat)) (2 ([cy] v infin));  # fi yn gallu
select ([cy] "mi" pron 1s) if (1 ([cy] "hefyd" adv));  # fi hefyd

select ([cy] "fo" pron 3s) if (-1 ([cy] v infin)) (not 1 ("fo" pron));  # i gael o

select ([cy] "ei" :her:) if (1 (am));
select ([cy] "ei" :her:) if (-1 ("yn" stat)) (1 (v infin)) (2 ("hi" pron f 3s));  # yn ei gweld hi
select ([cy] "ei" :his:) if (-1 ("yn" stat)) (1 (v infin)) (2 ("fo" pron m 3s));  # yn ei licio fo
select ([cy] "ei" :her:) if (1 (n) or (v infin)) (2 (pron f 3s));  # Eleri oedd ei enw hi, ei helpu ddi

select ([cy] "ei" :his:) if (1 (sm));
select ([cy] "ei" :his:) if (1 initvowel) (not 1 (h));

remove ([cy] n sm) if (-1 ([cy] "ein"));  # ein gorau (!<côr)

remove ("mynd" [cy] v 2s pres :go:) if (-1 ([cy] v infin) or ([cy] pron));  # colli ei portmanteau, mi gollodd hi ei portmanteau

select ([cy] "ni" :we:) if (not 1 (inflected));

select ([cy] "hwy" pron) if (-1 (v infin));  # neu fwyta hwy

#remove ([cy] "fo") if (not -1 (v)) (not -1 (n));
select ([cy] "fo" pron m 3s) if (-1 (v 3s) or ("dyna"));  # dyna fo
select ([cy] "o" prep :of:) if (-1 ([cy] n)) (1 (n) or (pron) or (name) or (im));  # llun o nhw - needs to go before the next one, can o er Luis_Miguel
select ([cy] pron m 3s) if (-1 ([cy] n)) (not -2 ("rhyw" preq));  # enw fo, ! rhyw fath o


# Nouns

remove nmnoun if (not -1 ("yn" "fy"));
select ([cy] n) if (-1 ("y" det.def) or ("rhyw" preq));  # rhyw stori

#select ([cy] n) if (not -1 ([cy] "yn" stat)) (1 ([cy] adj));  # dyn mawr
select ([cy] n) if (1 ([cy] adj));  # dyn mawr

select (n) if (-1 ([cy] "mewn" prep));  # mewn home

select ("ystod" :range:) if (-1 ("yn" prep));

select ("chwarae" n) if (1 ([cy] "teg" adj));

select ("peth" n) if (1 ([cy] "o" prep));  # deud wrtho beth o'r hanes

select ("ysgol" :school:) if (-1 ("y" det.def)) (-2 ("yn" prep));
select ("ysgol" :school:) if (1 ("uwchradd") or ("Cymraeg") or ("dyddiol"));

select ([cy] "dim" n) if (-1 ([cy] prep)) (not 1([cy] "un" num));
select ([cy] "dim" n) if (1 ([cy] "o" prep));  # dim o 
select ([cy] "dim" adv) if (1 ([cy] quan));  # dim rhagor, dim llawer
select ([cy] "dim" adv) if (1 ([cy] adj.comp));  # dim mwy
select ([cy] "dim" adv) if (-1 ([cy] pron)) (1 ([cy] "yn" stat));  # ti ddim yn
select ([cy] "dim" adv) if (1 ([cy] "un" num));  # dim un
select ([cy] "dim" adv) if (1 ([cy] "mor" adv));  # dim mor gymaint

select ("gwaith" :work:) if (-1 ("o" :of:));
select ("gwaith" :work:) if (-1 ("codi" :lift:) or ("colli") or ("yn" stat) or ("y" det.def));  # colli ngwaith, mae o'n waith eithriadol
select ("gwaith" :work:) if (-1 ("cael") or ("gwneud"));  # cael gwaith, gwneud gwaith bendigedig
select ("gwaith" :work:) if (-1 ("i" prep));  # mynd i gwaith

select ("gwaith" :time:) if (-1 ("ambell") or ("llawer") or (num));  # ambell waith, lawer gwaith, dwy waith

select ([cy] "diolch" n) if (-1 ("dweud" infin));
select ([cy] "diolch" n) if (1 ("yn" [cy] stat)) (2 ("mawr" [cy] adj));
select ([cy] "diolch" n) if (-1 (>>>));

select ([cy] "tro" n) if (-1 ([cy] "pob" adj));
select ([cy] "tro" n) if (1 ("cyntaf") or ("cynta"));  # tro cynta

select ([cy] "blaen" n) if (-1 ([cy] "tro" n));  # tro blaen

select ([cy] "ffôn" n) if (-1 ([cy] prep));  # ar ffôn
select ([cy] "cylch" n) if (-1 ("o" prep));  # o gylch dada
select ([cy] "cân" n) if (-1 ("canu" v) or (n));  # yn canu cân, ysgol gân
select ([cy] "ardal" n) if (-1 ("yn" stat)) (1 ([cy] adj));  # yn ardal tlws

select ("man" :place:) if (1 ("acw" adv) or ("hyn" adj.dem) or ("hynny" adj.dem) or ("yna" adv) or ("yno" adv) or ("yma" adv));  # fan hyn, fan yna, fan yma

select ("Mawrth" :March:) if (-1 ("mis" n));
select ("Mawrth" :Tuesday:) if (-1 ("dydd" n) or ("nos" n));
select ("Mercher" :Wednesday:) if (-1 ("dydd" n) or ("nos" n));
select ("Iau" :Thursday:) if (-1 ("dydd" n) or ("nos" n));
select ("Gwener" :Friday:) if (-1 ("dydd" n) or ("nos" n));
select ("Sadwrn" :Saturday:) if (-1 ("dydd" n) or ("nos" n));

select ("ymarfer" n) if (-1 ("angen" n));

select ("Cymraeg" n) if (-1 ("siarad") or ("o") or ("dim") or ("yn"));
select ("Cymraeg" a) if (-1 noun);

select ([cy] "math" n) if (1 ([cy] "â" prep));  # fath â - the same as
select([cy] "â" conj)  if (-1 ([cy] "math" n));
select ([cy] "math" n) if  (1 ([cy] "peth" n));  # y fath beth
select ([cy] "math" n) if  (-1 ([cy] "rhyw" preq));  # ryw fath

select ([cy] "peth" n) if  (-1 ([cy] "math" n));
select ([cy] "peth" n) if  (-2 ([cy] "math" n)) (-1 ([cy] "o" prep));  # math o beth
select ([cy] "peth" n) if  (-2 ("ambell" preq)) (-1 ([cy] "i" prep));  # ambell i beth

select ([cy] "dŵr" n :water:) if (not -1 softprep);  # dwyn dŵr

select ([cy] "tro" n) if (-1 (adj.poss));  # ein tro ni

select ([cy] "pryd" n) if (-1 ("un" num) or ("unrhyw" adj));  # yr un pryd, unrhyw bryd
select ([cy] "pryd" n) if (-2 ("<hyn>")) (-1 ("<o>"));  # ar hyn o bryd

select ([cy] "bodd" n :pleasure:) if (-2 ("wrth" prep)) (-1 (adj.poss));

select ([cy] "barn" n) if (-1 ("mynegi" v infin));  # mynegi barn


# Adjectives

select ([cy] "ei" a :her:) if (1 amnoun);
select ([cy] "ei" a :his:) if (1 smnoun);
select ([cy] "ei" a :his:) if (1 (int)) (2 smnoun);
select ([cy] "ei" a :her:) if (1 noun) (2 ("hi" pron));
select possessive if (1 noun);
select ([cy] adj.poss) if (-1 ("pen")) (1 ("hun"));  # ar ben ei hun

select ([cy] adj) if (1 ("iawn" adv));  # annwyl iawn

select ([cy] adj) if (-1 ([cy] "un" num));  # yr un du

select ([cy] "iawn" :OK:) if (-1 ("yn" stat));
select ([cy] "iawn" :OK:) if (-1 concessive);
select ([cy] "iawn" :OK:) if (@1 ("iawn")) (@-1 ("<.>"));
select ([cy] "iawn" :very:) if (-1 adjective);

select ([cy] "agos" adj.comp) if (1 (adv));  # nes i_lawr
select ([cy] "agos" adj.comp) if (not 2 (v));  # nes i ddim, !nes iddo fynd
select ([cy] "agos" adj.sup) if (-1 (n));  # dydd_Mawrth nesaf

select ([cy] "deg" :ten \(10\):) if (1 countable);

select ([cy] "unig" preq) if (-1 (det.def));

select ([cy] "da" adj) if (-1 (n));  # bachgen da

select ([cy] adj) if (-1 ("reit"));  # reit da

select ([cy] adj) if (-1 (n)) (1 (<<<));  # bola tost - don't want to make this too broad at present

select ([cy] "deg" num) if (1 ("munud"));  # deg munud

select ([cy] "ôl" adj) if (-1 ([cy] "tu" n));  # tu ôl

select ([cy] "rhydd" adj) if (-1 ([cy] "yn" stat));  # yn rhydd


# Verbs

remove ([cy] v imper sm);  # yn mis May fydd yn dod
remove ([cy] v 3s subj) if (-1 ([cy] det.def));  # y smocio

select ([cy] "bod" fut) if (not 1 ("yn" stat));
select ([cy] "bod" 3p pres) if (1 (pron));
select ([cy] "bod" v infin) if (-1 ("heb" prep));
select ([cy] "bod" inflected pres) if (0 ("<oes>")) (1 ("<.>"));
select ([cy] "bod" indef) if (1 ("neb" pron) or ("bod" v 3s pres));  # oes neb yn berffaith, oes mae
select ([cy] "bod" indef) if (1 (<<<));  # oes
select ([cy] "bod" indef) if (not -1 ("am") or (det.def) or ("pys"));  # oes - check: may be too broad
remove ([cy] "bod" pres.neg sm) if (0 ("<dydy>")) (not 1 ("<?>"));  # remove tydy if not at sentence end
remove ([cy] "bod" pres.neg spoken) if (0 ("<dydy>")) (1 ("<?>"));  # remove dydy if at sentence end - relationship between these needs to be looked at again - do we need both in the dictionary?
select ([cy] "bod" 3p pres) if (1 (pron 3p) or (pron 1p));  # dyn nhw

select ([cy] v infin) if (-1 ("yn" stat));
select ([cy] v infin) if (not 0 (sm)) (-1 ([cy] v infin));  # penderfynu troi, !dawnsio gynnau
select ([cy] v infin) if (-1 ("i" pron));  # dw i meddwl
select ([cy] v infin) if (-1 possessive);
select ([cy] v infin) if (-1 modal);
select ([cy] v infin) if (-1 preposition);
select ([cy] v infin) if (-1 ("bod" inflected));
#select ([cy] v infin) if (1 ("<.>"));  # not required
#select inflected if (1 ("<.>"));
select ([cy] v infin) if (-1 (pron) or (pron.obj)) (not 1 ("mewn" adv));
select ([cy] v infin) if (-1 ("<sy>"));
select ([cy] v infin) if (-1 ("byth"));  # byth anghofio
select ([cy] v infin) if (-1 ([cy] "dim" adv));  # dim siarad
select ([cy] v infin) if (-1 ("moin"));  # moin gofyn
select ([cy] v infin) if (-2 ("bod")) (-1 (n));  # mi oedd mam farw
select ([cy] v infin) if (-1* ("gwneud"));  # wnaeth nain Edwards briodi - CHECK this: it may be too broad
select ([cy] v infin) if (-1 ([cy] "a" conj)) (0 (!sm));  # a codi;
select ([cy] v infin) if (-1* ([cy] "bod") barrier (v));  # a oedd yr anthem digwydd bod - IMPORTANT RULE (use infin if a part of "bod" is to the left, but only if no other verb intervenes)
select ([cy] v infin) if (-1* ([cy] "i" prep)) (0 (sm));  # i'r plant ddechrau
select ([cy] v infin) if (-2 ([cy] "gallu" v)) (-1 (im));  # yn gallu um dal

# select inflected if (1 pronoun);  # too broad
select ([cy] v 1p) if (1 ([cy] pron 1p));
select ([cy] v 1s) if (1 ([cy] pron 1s));  # ddo i yn_ôl

select ([cy] v 13s) if (1 ([cy] 1s pron) or ([cy] 3s pron));  # wna i

select ([cy] v 2s) if (1 ([cy] 2s pron));  # coelia di

select ([cy] v imper) if (-1 (>>>));  # peidiwch â roi
#select ([cy] v imper) if (not 1 ([cy] pron));  # peidiwch â roi
remove ([cy] v imper) if (-1 ([cy] prt :aff:));  # mi gadawa i

#select (imper) if (not @1 ("ni"));  # This and the next rule cause 304 regressions in Spanish on sastre1...
#remove inflected if (not 1 pronoun);

select ("cyfarfod" v) if (-1 ("neis"));  # neis cyfarfod chi
select ("dal" v) if (1 (det.def));  # dal y bws

remove ([cy] v pres) if (-1 ([cy] adj.poss));  # cael ein codi

#remove inflected if (-1 infinitive) (0 (v));  # This acts also on Spanish (4 times in sastre1), but doesn't seem to cause a regression - it removes una (< unir) before "select ([es] det.indef f) if (1 (n f) or (adj f) or (ord f));" applies, which would strike out una (< unir) anyway.  If it bleeds across into another language, though, the rule is probably too broad anyway.


# Adverbs

remove ([cy] v 3p fut spoken sm) if (not -1 ([cy] "mi" prt) or ([cy] "na" prt) or ([cy] "a" prt));  # pethau i_gyd allan, wagan
# These two rules may not be needed now that the above rule is in place.
select ([cy] "allan" adv) if (-1 ("pell"));
select ([cy] "allan" adv) if (-1 ("sefyll") or ("mynd"));  # sefyll allan, mynd allan

select ([cy] "iawn" :OK:) if (not -1 adjective);

select ([cy] "gynnau" adv) if (not -1 softprep) (not -1 (pron));;

select ([cy] "llawr" adv) if (1 ("yma"));  # lawr yma
select ([cy] "llawr" adv) if (-1* ("dod") or ("mynd"));  # ddoth lawr, aeth y capeli Cymraeg lawr - CHECK: may be too broad

select ([cy] "ôl" adv) if (-1 ("dod" v));  # dod nôl
select ([cy] "ôl" adv) if (1 ("mewn" adv) or ("o" prep));  # nôl i_fewn

select ([cy] "rŵan" adv) if (not -1 (n f sg) or ("yn" stat));  # i fi wan, y babanod wan

select ([cy] "bron" adv) if (1 ("â" prep)) (2 (v infin));  # bron â gorffen


# Interrogatives

select ([cy] "lle" int) if (-1 (>>>) or ("yn" prep)) (1 (v));  # yn lle dwi'n gallu
select ([cy] "lle" int) if (-1 ("yn" prep));  # yn lle?
select ([cy] "lle" int) if (1 ("bod"));  # lle mae
select ([cy] "lle" int) if (-1 ("dyna")) (1 (pron));  # dyna lle ti

select ([cy] "pryd" int) if (-1 (>>>)); 
select ([cy] "pryd" int) if (-1 ("dyna" adv));  # dyna pryd maen nhw

select ([cy] "beth" int) if (-1 (>>>)); 
select ([cy] "beth" int) if (1 inflected);
select ([cy] "beth" int) if (1 ("<?>"));  # allwedd o beth?


# IM

select ([cy] "bod" im) if (-1 ("felly") or ("iawn"));  # felly de, iawn de
select ([cy] "bod" im) if (1 (<<<));  # efo Robert de, be oedd ta
select ([cy] "bod" im) if (not -1 (det.def) or ("yn" prep));  # check - too broad?

select ([cy] "deg" num) if (not -1 softprep or ([cy] n f sg));  # um deg

select ([cy] "bechod" im) if (1 (<<<));  # bechod.


# Substitutions

substitute (preq) (pron) ([cy] "rhai" preq) if (not 1 (n));  # rhei yna
substitute (adj.dem) (pron) ([cy] adj.dem) if (not -1 (n));  # gymaint o hwnnw
substitute (v infin :hold:) (adv :still:) ("dal" [cy] v infin) if (1 ("wedi" prep) or ("yn" stat) or ("i" prep));  # dal wedi recordio, yn dal i ymarfer


# Residual selection
# Make a default choice; this is intended to get rid of most [or]s
# Note that these rules don't like you using the :meaning: in the definition.
# Should these not be ANDs?

select ([cy] v infin) if (0C ([cy] v infin) or ([cy] v 3s imper));  # cerdded - C enforces the two conditions; without this, only the former bites, and the rule will apply when you have (eg) (v 2s pres) as the second condition.
select ([cy] v infin) if (0C ([cy] v infin) or ([cy] v 2s imper));  # siarad
select ([cy] v infin) if (0C ([cy] v infin) or ([cy] v 2s pres));  # cloi

select ([cy] v imper) if (0C ([cy] v 2s imper) or ([cy] v 3s pres));  # ffonia
select ([cy] v imper) if (0C ([cy] v 2p imper) or ([cy] v 2p pres));  # esgusodwch

#select ([cy] prep :of:) if (0C ([cy] "fo" pron m 3s spoken :he:) or ([cy] "o" prep :from:) or ([cy] "o" prep :of:)); 

select ([cy] prt :neg:) if (0C ([cy] "na" prt) or ([cy] "na" pron.rel.neg) or ([cy] "na" conj) or ([cy[ "na" conj));

select ([cy] adj.poss :his:) if (0C ([cy] adj.poss :his:) or ([cy] adj.poss :her:));  # collapse ei-m and ei-f to ei-m
substitute (:his:) (:3S:) ([cy] adj.poss :his:);  # adjust lexeme to be non-gender specific



##### Rules for indeterminate Welsh/English #####


select ([in] "dad" :dad:);  # avoid tad

select ([in] "just" adv) if (not -1 (n));  # mae just yn
select ([in] "just" adv) if (1 ("bod" v infin));  # just bod

select ([in] v past+p) if (-1 ([cy] "yn" stat));  # yn bound
substitute (v past+p) (pastpart) ([in] v past+p) if (-1 ("yn" stat));
select ([in] v past+p) if (1 ([cy] "o" prep));  # bound o ddigwydd
substitute (v past+p) (pastpart) ([in] v past+p) if (1 ("o" prep));

substitute (sv infin) (v infin) ([in] sv infin) if (-1 ("yn" stat));  # yn whine_io
substitute (sv infin) (v infin) ([in] sv infin sm) if (-2 ("gwneud")) (-1 (pron));  # yn whine_io, wna i dext_io

substitute (sv infin) (n sg) ([in] sv infin) if (-1* (det.def) barrier (n));  # y stuff, yr um stuff
substitute (sv infin) (n sg) ([in] sv infin) if (-1 ([cy] "am" prep) or ([cy] "ar" prep));  # am bass arall, ar drain
substitute (sv infin) (n sg) ([in] sv infin) if (1 ([cy] v infin));  # stuff darllen

select ([in] n sm) if (-1 ([cy] "ar" prep));  # ar drain

remove ([in] v infin sm) if (-1 ("yn" stat));  # yn freak_o<break



##### Rules for English #####

#remove ([en] infin) if (not 1 pronoun);

remove ([en] conj pv);  # he likes; 


### Rewrite English tags ###

substitute (asv) (v+ing) ([en] n) (-1 ([es] v));  # combine with [1] below?
# The order of the source tags defines where the target tag will be placed;  here, the v+ing will go in the position occupied by asv; if you turn this around, to (n sg asv), the v+ing will go in the position of n sg.  The above also keeps the + in + asv; if the + is included in the source (+ asv n sg) then it will also be removed from the line.  You need to include [en] in the target environment, otherwise it applies to ALL words tagged n, including Spanish ones.
#substitute (n) (v+ing) (n) (-1 ([es] v));

substitute (gb) (have.v.3s.pres) ("<he's>") (1 ([en] av past+p));  # he's got it
substitute (gb) (have.v.3s.pres) ("<she's>") (1 preverbal) (2 ([en] av  past+p));  # she's just got one

substitute (gb) (be.v.3s.pres) ("<that's>");
substitute (gb) (be.v.3s.pres) ("<it's>");
substitute (gb) (be.v.3s.pres) ("<he's>");  # he's got it
substitute (gb) (be.v.3s.pres) ("<she's>");  # she's gonna be
substitute (gb) (be.v.3s.pres) ("<there's>");  # there's no raise
substitute (gb) (us.pron.sub.1p) ("<let's>");  # let's bring

substitute (gb) (=poss) ([en] n sg) (1 ([en] n));  # the daughter's pet

substitute (n sg pv) (n pl) ([en] n sg pv);  # because pools are good; kids; houses

substitute (as) (adj) ([en] as) (1 ([en] n) or ([en] pron));  # a miniature rabbit; miniature ones
substitute (as) (n sg) ([en] as) (-1 ([en] det.def) or ([en] det.indef));  # a miniature # CHECK is this necessary? overlaps the one above

#substitute (adj comp.ag) (adj.comp) ([en] comp.ag) (1 (n));  # smaller box
substitute (adj comp.ag) (adj.comp) ([en] adj comp.ag);  # is cheaper but - CHECK - try this wider version for a while

substitute (sv infin comp.ag) (n sg ag) ([en] sv infin comp.ag) (-1 (det.indef) or (det.def) or (name));  # un camper; un M_P_three player; the bumper;
substitute (sv infin comp.ag) (n sg ag) ([en] sv infin comp.ag) (-2 (det.indef) or (det.def)) (-1 (adj));  # a special sticker

substitute (sv infin pv) (v 3s pres) ([en] pv) (-1 ([en] dem.far) or (pron.sub 3s) or (pron));  # that starts; he presses
substitute (sv infin) (v 12s13p pres) ("<don't>");  # you don't 
substitute (sv infin) (v prespart) ("<gonna>");  # gonna have

substitute (13s) (3s) ([en] v 13s) (not -1 (pron.sub 1s));  # American_Outdoors was
substitute (12s13p) (1s) ([en] v 12s13p) (-1 (pron.sub 1s));  # I don't
substitute (12s13p) (2sp) ([en] v 12s13p) (-1 (pron.sub 2sp));  # you don't
substitute (12s13p) (3p) ([en] v 12s13p) (-1 (pron.sub 3p));  # they don't
substitute (12s13p) (3p) ([en] v 12s13p) (0 ("<don't>")) (1 (pron.sub 3p));  # don't they # should be marked 12s123p - combine with ones below
substitute (2s123p) (1p) ([en] v 2s123p) (-1 (pron.sub 1p) or (n pl));  # we were; 
substitute (2s123p) (3p) ([en] v 2s123p) (-1 (pron.sub 3p) or (n pl));  # they were; the taxes were
substitute (123p) (1p) ([en] v 123p) (-1 (pron.sub 1p));  # we are
substitute (123p) (2sp) ([en] v 123p) (-1 (pron.sub 2sp));  # you are
substitute (123p) (3p) ([en] v 123p) (-1 (pron.sub 3p));  # they are
substitute (123sp) (1s) ([en] v 123sp) (-1 (pron.sub 1s));  # I can
substitute (123sp) (2sp) ([en] v 123sp) (-1 (pron.sub 2sp));  # you can
substitute (3p) (2sp) ([en] v 3p) (0 ("be") or ("can") or ("have") or ("do")) (1 (pron.sub 2sp));  # are you  # SEC
substitute (123sp) (3s) ([en] v 123sp) (-1 (pron.sub 3s));  # he can

substitute (sv infin asv) (v prespart) ([en] sv infin asv) (1 (det.def ) or (det.indef ) or ([en] dem.far) or ([en] "for") or (conj));  # finding that; working for; thinking que; 
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-1 ([en] "be") or preverbal or (:go:) or ([en] "do"));  # we were looking; vamos camping; as they do selling
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-1 ([en] v) or (sv));  # that starts cooling; keep telling; keep talking
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-2 ([en] v) or (sv)) (-1 ("on" prep));  # keep on talking
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-2 ([en] v)) (-1 ("not"));  # you are not seeing - constrain to "be"?
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-2 ([en] v)) (-1 ("up" adv));  # we ended up finding
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (1 ([en] n));  # a camping spot;
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-1 ([en] pron.sub) or ("than") or ("on"));  # worth it being; than watching; planning on doing
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-1 (>>>));  # talking.

substitute (sv infin asv) (n sg ger) ([en] sv infin asv) (-1 (prep+det.def) or (det.def) or (det.indef));  # del meeting; the hiring;
substitute (sv infin asv) (adj) ([en] sv infin asv) (-1 ("very"));  # they get very upset
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-1 (n));  # my husband being

substitute (sv infin av) (v pastpart) ([en] sv infin av) (-1 ([en] "be") or (be.v.3s.pres) or ([en] "have") or preverbal);  # it's slanted;
substitute (sv infin av) (v pastpart) ([en] sv infin av) (-2 ([en] "be") or (be.v.3s.pres) or ([en] "have")) (-1 ("not") or preverbal);  # have not increased
substitute (sv infin av) (v pastpart) ([en] sv infin av) (-2 ([en] "be")) (-1 ([en] pron.sub));  # is it called
substitute (sv infin av) (v pastpart) ([en] sv infin av) (1 (name));  # unincorporated Dade_County
substitute (sv infin av) (v pastpart) ([en] sv infin av) (1C (n) or (sv));  # smoked barbecue - C means it must be unambiguously sv, ie there cannot be several readings of which sv is one - required to prevent "they played all eighteen" getting tagged pastpart instead of past
substitute (sv infin av) (v pastpart) ([en] sv infin av) (-1 ([cy] "yn" stat));  # yn impressed

substitute (sv infin av) (v past) ([en] sv infin av) (-1 ([en] pron.sub) or (name) or ("<what>") or (n));  # they closed; Pepita moved; but what happened was; a small person wanted (not optimal here - parenthesis)
substitute (sv infin av) (v past) ([en] sv infin av) (-2 ([en] pron.sub)) (-1 preverbal);  # they just closed

substitute (av past) (v past) ([en] av past) (-1 ([en] pron.sub)) (not -1 (have.v.pres)) (not -2 ("have"));  # we bought; !you've done
#substitute (av past) (v past) ([en] av past) (not 1 ([en] n));  # that came about - too broad?
substitute (av past) (v past) ([en] av past) (1 ([en] pron.sub));  # that made it
substitute (av past) (v past) ([en] av past) (-1 ([en] n));  # the kids came

substitute (av past) (v pastpart) ([en] av past) (-1 (have.v.pres) or ("have") or ("be") or (det.def) or (det.indef));  # you've done; you have done; it was misspent; un rebuilt
substitute (av past) (v pastpart) ([en] av past) (-2 ("have")) (-1 (pron.sub));  # have you heard

substitute (sv infin pv) (v pres 3s) ([en] sv infin pv) (-2 ([en] adj.poss) or ([en] adj)) (-1 ([en] n sg));  # his wife puts
substitute (sv infin pv) (v pres 3s) ([en] sv infin pv) (-2 ([en] n)) (-1 preverbal);  # the whole thing like opens up;
substitute (sv infin pv) (n pl) ([en] sv infin pv) (-1 ([en] adj) or ([en] n) or ("det.*"r) or ("at" prep));  # other offers; speed bumps

substitute (sv infin) (v 1s pres) ([en] sv infin) (-1 ([en] pron.sub 1s));  # I mean
substitute (sv infin) (v 1p pres) ([en] sv infin) (-1 ([en] pron.sub 1p));  # we do
substitute (sv infin) (v 2sp pres) ([en] sv infin) (-1 ([en] pron.sub 2sp));  # you know; you get
substitute (sv infin) (v 2sp pres) ([en] sv infin) (-2 ([en] pron.sub 2sp)) (-1 preverbal);  # you just get
substitute (sv infin) (v 3s pres) ([en] sv infin) (-1 ([en] pron.sub 3s)) (not -1 (be.v.3s.pres));  # he keep[s]
substitute (sv infin) (v 3p pres) ([en] sv infin) (-1 ([en] pron.sub 3p) or (n pl)) (not -1 (be.v.fut));  # they build; employees have; !they'll be catching;

substitute (sv infin) (v pres) ([en] sv infin) (-1 ([en] "why"));  # why do you

substitute (sv infin) (v infin) ([en] sv infin) ((-1 ("to" [en] prep)) or (-2 ("to" [en] prep)));  # to actually put it
substitute (sv infin) (v infin) ([en] sv infin) (-1 ("<gonna>") or ("<gotta>") or ("<don't>") or ("<wanna>") or preverbal);  # gonna be; gotta wait; don't have to
substitute (sv infin) (v infin) ([en] sv infin) (1 ([en] pron));  # match everything
substitute (sv infin) (v infin) ([en] sv infin) (1 ([en] det.def)) (2 (n));  # install the hammock
substitute (sv infin) (v infin) ([en] sv infin) (-1 ([en] "can"));  # couldn't find it
substitute (sv infin) (v 2sp pres) ([en] "have" sv infin) (1 (pron.sub 2sp)) (2 (av past));  # have you heard
substitute (sv infin) (v infin) ([en] sv infin) (-1 (>>>));  # change.
substitute (sv infin) (v infin) ([en] sv infin) (-1 (conj));  # and open it
substitute (sv infin) (v infin) ([en] sv infin) (-1 ([cy] "yn" stat));  # yn keep in touch

substitute (sv infin) (v imper) ([en] sv infin) ((-1 ("oh")) or (0 ("<let's>")));  # oh look!; let's bring
substitute (sv infin) (v imper) ([en] sv infin) (-1 ("well"));  # well bring me # this is not a very good rule!
substitute (sv infin) (v imper) ([en] sv infin) (1 ("God"));  # thank God

substitute (infin) (v imper) ([en] infin) (0 ("<let's>"));  # thank God

substitute (sv infin) (n sg) ([en] sv infin) (-1 ([en] adj)) (-2 ([en] det.def) or ([en] det.indef));  # a good deal
substitute (sv infin) (n sg) ([en] sv infin) (-1 ("det.*"r) or ("at" prep) or ("in" prep) or (v pastpart) or (det.indef));  # a raise; the cut; at work; smoked barbecue; un barbecue
substitute (sv infin) (n sg) ([en] sv infin) (-1 ([en] n) or ([en] "more") or ([en] "no") or (det.def) or (det.indef));  # speed bump; more work; no raise; the cut down (cut-down?); el spring break;
substitute (sv infin) (n sg) ([en] sv infin) (-1 (adj.poss));  # her back
substitute (sv infin) (n sg) ([en] sv infin) (-1 (num));  # dau neu dri fill

substitute (be.v.3s.pres) (have.v.3s.past) ("<it's>") (1 (av past+p) or ("be" v pastpart));  # it's got; it's been
substitute (be.v.3s.pres) (have.v.3s.past) ("<he's>") (1 (av past+p));  # he's got it; 

substitute (av past+p) (v pastpart) ([en] av past+p) (-1 ([en] "have") or ("<he's>") or ("<she's>") or (have.v.3s.past) or preverbal);  # he's got it; it's got; 
substitute (av past+p) (v past) ([en] av past+p) (-1 ([en] pron.sub) or (name));  # she got; Pepa had
substitute (av past+p) (v past) ([en] av past+p) (-1 ([en] n)) (1([en] v pastpart));  # the car had been

substitute (pron.sub) (pron.obj) ([en] "it" pron.sub) (-1 ([en] v infin));  # and open it
substitute (pron.sub) (pron.obj) ([en] "it" pron.sub) (-1 ([en] v) link not 2 ([en] v)) (not 0 (be.v.3s.pres));  # they take it away; !I mean it's ...;
substitute (pron.sub) (pron.obj) ([en] "it" pron.sub) (-1 ("<that's>") or ("worth"));  # that's it; worth it
#substitute (pron.sub) (pron.obj) ([en] "it" pron.sub) (-1 ([en] prep)) (1 (<<<));  # in it.; replace by broader one below
substitute (pron.sub) (pron.obj) ([en] "it" pron.sub) (1 (<<<));  # in it., feel it., block it. 

substitute (pron.sub) (pron.obj) ([en] "you" pron.sub) (-1 ([en] "for" prep)) (not 1 ([en] v));  # for you; !for, you know, they; 
substitute (pron.sub) (pron.obj) ([en]"you" pron.sub) (-1 ([en] prep));  # talk to you - CHECK this broader version

substitute (pron.obj) (pron.sub) ([en] pron.obj 3s) (-1 ("<isn't>") or ("<is>"));  # isn't it; is it
substitute (pron.obj) (pron.sub) ([en] "we" pron.obj) (-1 ("be" v) or ("have" v));  # are we

substitute (pron.obj) (pron.indir) ([en] pron.obj) (-1 ("buy") or ("send") or ("bring")) (1 ([en] det.def) or ([en] det.indef) or ([en] adj) or ([en] n));  # I bought him a; to send you the stuff; !they bought things

substitute (pron.refl) (pron.refl.indir) ([en] pron.refl) (-1 ("buy"));  # he bought himself

substitute (pron sg pl) (pron pl) ([en] pron sg pl)  # the miniature ones

substitute (adj adv) (adj+adv) ([en] adj adv);  # originally, fairly  # CHECK
#substitute (adj) (adv) ([en] adj) (-1 ([en] v)) (not 1 ([en] n) or ([en] dem.far));  # to work double; !all that extra money - DELETE - too broad
substitute (adj) (adv) ("first") (1 (v));  # when we first moved

substitute (adv) (pron) ("<there's>"); 

substitute (adv) (adj) ("more") (1 (n));  # five more minutes

substitute (v 1s pres) (v infin) ([en] v 1s pres) (-1 (be.v.fut));  # I'll have

substitute (adj) (pron) ([en] "own" adj) (-1 (adj.poss)) (not 1 (n));  # on my own

substitute (rel) (adv) ("where" [en] rel) (1 ("be" [en] v));  # where is

substitute (prep) (adv) ([en] "off" prep) (not -1 (det.def) or (det.indef) or (n));  # off already
substitute (prep) (adv) ([en] "on" prep) (-1 ("keep"));  # keep on talking


### English disambiguations ###

select ([en] dem.far) if ((-1 ("like" conj) or ("and" conj)) or (1 ("be" [en] v 3s)));  # like that; that is
select ([en] dem.far) if (0 ("<that>")) (1 (adj) or (n));
select ([en] dem.far) if (not -1 ([en] n)) (0 ("<that's>"));  # so that's something; !one of these guys that's crazy
select ([en] dem.far) if (1 (<<<));  # finding that. ; 

#select ("that" [en] conj) if (not 1 (adj) or (n));  # CHECK - too broad?
select ("that" [en] conj) if (1 (pron.sub)) (2 (v));
select ("that" [en] conj) if (1 ("have" [en] v 3s));  # that has
select ("that" [en] conj) if (1 ([en] "det.*"r));  # that the; that a
select ("that" [en] conj) if (-2 ([en] det.def )) (-1 (pron) or (n)) (1 (v));
select ("that" [en] conj) if (-1 ("now") or ("so"));  # now that; so that
select ("that" [en] conj) if (1 ("<it's>"));  # that it's 
select ("that" [en] conj) if (-1 ([en] n));  # one of these guys that's crazy

select  ([en] pron) if (not -1 (n) or (num));  # this one; three zero one
select ([en] num) if (-1 ([en] num));  # three zero one
#select  ([en] pron) if (-1 (adj));  # little ones;
select  ([en] pron.indir) if (1 ([en] det.indef));  # buy her a
select  ([en] pron.obj) if (1 ([en] "to" prep));  # want her to have

select ([en] num) if (1 (n));  # one advantage

select ("like" sv infin) if (-1 ("do" [en] v pres neg));  # you don't like
select ("like" sv infin) if (1 ("to" [en] prep));  # a lot of them like to go
select ("like" v) if (-1 (pron.sub)) (not -1 ("<I'm>"));  # he likes; you like
select ("like" [en] conj) if (1 ([en] det.indef) or ("what" w) or (pron.sub));  # like a house; like what; like we were
select ("like" [en] conj) if (-1 preverbal or (v) or ("<I'm>"));  # just like; they played, like, ...; I'm like;
select ("like" [en] conj) if (not -1 (pron.sub)) (1 (n));  # like restaurants
select ("like" [en] conj) if (1 (v prespart) or (num));  # like cleaning; like fifteen years

select ("even" [en] adj) if (not 1 (v));  # it's not even (=level)
select ("even" [en] adv) if (1 (v));  # they don't even wanna
remove ([en] adj.poss) if (1 ("some"));  # we brought her some ribs
select ([en] adj) if (-1 ("too"));  # too early

select ([en] adv :back:) if (1 ([en] adv :here:) or ([en] adv :there:) or ([en] prep));  # back here; 
select ([en] adv :over:) if (1 ([en] adv :here:) or ([en] adv :there:));  # over there
select ([en] adv :back:) if (-1 ([en] pron.sub)) (-2 auxiliary);  # are you back;
select ([en] adv :back:) if (-1 ([en] "come"));  # coming back;
select ([en] "home" adv) if (not -1 ([en] det.indef) or ([en] det.def) or ([en] adj));  # I'm not home
select ([en] "over" adv) if (-1 ([en] "almost" adv));  # almost over
select ([en] "around" adv) if (not 1 ([en] det.def) or ([en] det.indef) or ([en] num));  # drive around so much
select ([en] "just" adv) if (1 ([en] v) or ("to" prep));  # she's just got; just to one

select ([en] n sg) if (-1 ([en] det.indef) or ([en] det.def));  # in the back
select ([en] n sg) if (1 ("of")) (2 ([en] det.indef));  # kind of a

select ([en] adj.poss) if (1 ([en] n) or ([en] "own"));  # her companion; her own insurance
#select ([en] pron.obj) if (not 1 (n));  # we brought her some

#remove ([en] adj) if (not 1 ([en] n));  # and open it  # CHECK!

select ([en] v infin) if (1 (pron.obj) or (pron));  # and then match everything
select ([en] v) if (-1 (pron));  # everything opens up
select ("open" [en] v) if (1 ("up" adv));  # you open up



# Global rules

# Incorrect segmentation of -er - perhaps better to do rules excluding these by context, since in some cases they can actually occur, eg a four-master ...
remove ("a"  [en] det.indef :a: pv);  # a-s
remove ("aft"  [en] adv :aft: comp.ag);  # aft-er
remove ("broth" [en] n sg :broth: comp.ag);  # broth-er
remove ("mast" [en] n sg :mast: comp.ag);  # mast-er
remove ("east" [en] n sg :east: comp.ag);  # east-er
remove ("open" [en] adj :open: pv);  # open-s
remove ("clean" [en] adj :clean: asv);  # clean-ing



##### Rules for Spanish #####

### To Do ###
# Rewrite viejito - old_guy.N.M.SG.DIM -> old_guy.DIM.N.M.SG - perhaps better to put this in write_cgautogloss.php.
# Rewrite to remove v, n, adj, adv?
# Rule to convert dem.adj to dem.pron when no accent is written.
# Rule to convert adjectives to pronouns when there is no noun attached.


# Global rules

# 1 - remove less common tenses - has the effect of "deleting" items from the dictionary
#select (v 3s pres);
remove (subj.pres);
remove ("unir" [es] v 1s pres);  # que hagamos uno
remove ("vengar" [es]  v 1s pres);  # gets mixed up with vengo<venir

# 2 - remove annoying words - needs to be looked at again!
remove ("vestir"); # pero viste las cositas
remove ("asir");  # ~así
remove ("pasa" n);  # raisin ~pasa


# Articles

select ([es] det.def) if (1 (n f) or (adj f) or (ord f) or ([en] adj) or ([en] n)); # los dry walls
select ([es] det.def) if (1 (n m) or (adj m) or (ord m));
select ([es] det.def) if (-1 ("de" prep :of:));
select ([es] det.def) if (not 1 (v));  # los ladrillos ... los 
select ([es] det.def nt sg) if (1 ("que" [es] conj));  # en lo que

select ([es] det.indef f) if (1 (n f) or (adj f) or (ord f));
select ([es] det.indef m) if (1 (n m) or (adj m) or (ord m));
select ([es] det.indef) if (1 ([es] det.indef)) ;  # una ... un hammock
select ([es] det.indef) if (not 1 (n));  # una ... como se llama

substitute (pron m sg) (num) ("un" [es] pron m sg) ((-1 (num)) or (1 (num)));  # tres cero uno cuatro
select ("un" [es] pron) if (not 1 (n));  # no has visto una


# Conjunctions

select ("que" :that:) if (-1 ("<lo>"));  # lo que están haciendo
select ("que" :that:) if (not -1 (adj));
select ("que" :that:) if (1 (pron.obl)) (2 (v));  # que le dio
select ("que" :that:) if (1 (v));  # la vez anterior que venimos

select ("que" conj :that:) if (-1 ("tener"));  # tiene que
substitute (conj) (pron.rel) ("que" [es] conj :that:) (-1 (det.def) or ("<del>") or ("<al>") or (det.indef) or (pron.dem));  # el chico del que me hablaste; lo que están haciendo; yo tengo una que cada vez; son los que tienen; eso que es; 
substitute (conj) (pron.rel) ("que" [es] conj :that:) (-1C (n));  # el hombre que me habló;

select ([es] e) if (not 1 ([es] adj));  # bueno; claro - this works, but really shouldn't!
select ("como" [es] conj) if ((1 (pron.sub) or ("que" [es] conj) or ("aquí" [es] adv) or ("en" [es] prep)) or ((-1 ("ser" v))));
select ("como" [es] conj) if (1 (v) or (name) or ([en] n) or (num));  # como está; como mataron; como Miami, como guinea_pig; como dos


# Prepositions

select ("para" [es] prep :for:) if (1 (pron.obj) or (pron.dem) or (v infin) or ("que" conj) or (det.def) or (adj.poss));  # para mi cámara; 
select ("para" [es] prep) if (1 ("dentro" adv) or ("arriba" adv) or ("allá" adv) or ("acá" adv) or ("abajo" adv));  # para dentro; para arriba; para allá; para abajo
select ("entre" [es] prep :between:) if (not 1 ("en"));


# Nouns

select ([es] n m sg) if (-1 ([es] det.def  m sg) or ([es] det.indef m sg));
#remove ([es] n m sg) if (not -1 ([es] det.def  m sg) or ([es] det.indef m sg));  crap!
select ([es] n m pl) if (-1 ([es] det.def  m pl) or ([es] det.indef m pl));
select ([es] n f sg) if (-1 ([es] det.def  f sg) or ([es] det.indef f sg)) (not 1 (n));;
select ([es] n f pl) if (-1 ([es] det.def  f pl) or ([es] det.indef f pl));

select ([es] n) if (1 ("del" prep+det.def) or ("de" prep));
select ([es] n) if (-1 ("de" prep) or ("en" prep));  # de concreto; en español
select ([es] n) if (-1 ("cualquier") or ("qué")) (not 0 ("pasar"));  # cualquier cosa; qué cosa; 0 is kludge to avoid "qué pasa"
select ([es] n) if (-1 ([es] adj.dem));  # esa cosa
select ([es] n) if (-1 ([es] adj.poss));  # su idea
select ([es] n) if (-1 ([es] ord));  # el primer viaje

select ([es] n) if (-1 ([cy] v) or ([cy] prep) or ([cy] stat) or ([cy] det.def) or ([cy] "a" conj));  # gyrru notas, yn central, y notas, a notas


select ("gusto" n) if (-1 ("mucho" adj));
select ("casa" n f sg :house:) if (-1 (prep));


# Demonstratives

select ("este" adj.dem m sg) if (1 (n m sg));


# Pronouns

substitute (pron.sub) (pron.obj) ([es] pron.sub) (-1 ("a" [es] prep));  # a nosotros
#substitute (pron.obj) (pron.indir) ([es] pron.obj) (-1 ([es] pron.sub)) (1 ([es] pron.obj)) (2 ([es] v));  # yo te la voy; yo te la hago
#substitute (pron.obj) (pron.indir) ([es] pron.obj) (-1 ([es] pron.sub)) (1 ([es] v));  # yo me recuerdo
#substitute (pron.obj) (pron.indir) ([es] pron.obj) (-1 ([es] "no" adv)) (1 ([es] v));  # no te ha dado
# the above are covered now by using pron.obl for me, te, le, nos, os, les

select ([es] pron.refl) if (1 (v 3s) or (v 13s) or (v 23s) or (v 3p));
select ("se" [es] pron.indir) if (1 (pron.obj)) (2(v));  # se lo hizo
select ("se" [es] pron.refl) if (1 (pron.obl) or (v));  # se me olvidó; se nos ha occurrido 
select ([es] pron.obj) if (1 ("que" conj));
select ([es] pron.sub 1s) if (1 ([es] v 1s));  # yo recuerdo;

select ([es] pron) if (1(v));  # cuando uno manda

select ("él" [es] pron.obj) if (1 (v));
select ("otro" pron) if (not 1 (n));
select ("uno" [es] pron) if (1 ("de"));
select ("todo" [es] pron) if (1 (v) or (<<<));  # se riega todo
select ("todo" pron) if (-1 ("con" prep));  # pero con todo
select ("uno" [es] pron) if (1 ("<.>"));  # has visto uno. ;
select ("alguno" [es] pron) if (not 1 (n));  # algunos de los; 
select ("nada" [es] pron) if (1 ("<del>") or ("más"));  # no son nada del; nada más
select ("nada" [es] pron) if (-1 (v) or ("ni" conj));  # nunca han hecho nada; ni nada


# Adverbs

select ([es] adv) if (-1 ("más"));  # más cerca a
#select ([es] adv) if (not -1 (adj));  # es igual

select ("mañana" adv) if (not -1 ("la" det.def));
select ("temprano" adv) if (-1 ("muy"));
#select ("sí" [es] adv) if (not 1 (v));  # sí los bloquecitos  # replaced by adverb rule below
select ("sí" [es] adv) if (not -1 (prep));  # sí son las; sí los bloquecitos
select ("arriba" adv) if (-1 ("para" prep) or ("hasta" prep) or ("algo" pron));
select ("arriba" adv) if (0* ("poner" v));  # ponerle arriba - 0* means anywhere in the sentence
select ("arriba" adv) if (1 ("del") or ("de"));  # arriba del
select ("así" [es] adv) if (1 inflected or ("mismo") or ("que"));  # así hablas; así mismo; así que
select ("poco" adv) if (-1 (v));  # se falta poco
select ("mucho" adv) if (-1 (v));  # no crezca mucho
select ("bien" adv) if (1 (adj));  # bien práctico
select ("bien" adv) if (-1 ("<está>"));  # está bien
select ("bastante" adj) if (not 1 (n));  # hemos hablado bastante;
select ("menos" adv) if (-1 ([es] det.def nt)) (1 ("que"));  # lo menos que
select ("bien" adv) if (1 (adj));  # bien práctico
select ("fuera" adv) if (1 ("de" prep));  # fuera de Miami
select ("o_gwmpas" adv) if (not 1 ("y" det.def));  # efo pobl o_gwmpas


# Adjectives

substitute (adj.poss) (pron.poss) ([es] "of_.*"ri adj.poss) (not -1 ([es] n));  # los suyos
substitute (adj.dem) (pron.dem) ([es] adj.dem) (not 1([es] n)); # un hammock de esos;

select ([es] adj m sg) if (-1 ([es] n m sg) or (det.indef));  # un poco
select ([es] adj) if (1 (n));  # tiene bastante espacio; otro zip code
select ([es] adj.int) if (1 (n));  # cuantos palazos
select ([es] adj) if (-1 ("más" adv));  # lo más pesado

select ("mucho" adj) if (1 (n));  # mucho speed bump
select ("tarde" n) if (-1 (det.def));
select ("mejor" adj) if (1 (n));
select ("todo" [es] adj) if (1 (det.def));
select ("todo" [es] adj) if (1 ([es] adj.dem) or ([es] pron.dem) or (adj));  # toda esa cosa; todo eso; toda suelta
select ("menos" adv) if (-1 ("o" conj)) (-2 ("más" adv));  # más o menos
select ("media" adj) if (1 (n));  # la media hora
select ("bastante" adj) if (1 (n));
select ("muerto" adj) if (-1 (n));  # toda esa hierba muerta

remove ("este" n m sg) if (not -1 (det.def));  # porque este the one; 


#  Verbs

select (v) if (-1 ("así" [es] adv));
select (v pastpart) if (-1 ("haber") or ("estar") or ("ser"));  # siendo incorporados
select (v infin) if (-1 ("para" [es] prep :for:));
#select (v 3s pres) if (-1 ("donde" l :where:) or (pron) or (pron.sub));
#select ([es] v pres) if (-1 ("si" [es] c));  # si entra (to remove imperative)
select ([es] v 2s non_imper) if (-1 ([es] pron.sub 2s));  # tú viste
#select ([es] v pres) if (-1 ([es] pron.refl) or ([es] conj));  # se asfalta; que vale
select non_imper if (-1 ([es] pron.refl mf 23sp) or ([es] conj) or ([es] pron.rel));  # se pudiera; se asfalta; que vale; lo que pasa
select ([es] v 23s pres) if (-1 ([es] pron.obl));  # te da
select ([es] v) if (-1 ([es] pron.sub));  # que yo sepa; ellos son;
select non_imper if (-1 ("no")) (0 ([es] v));  # no vale la pena
select ([es] v imper) if (-1 (>>>));  # mira ahí (beginning of utterance)
select ([es] v imper) if (-2 (>>>)) (-1 (im));  # eh pasa Boedo

substitute (123s) (1s) ([es] v 123s subj.pres) (-1 ([es] pron.sub mf 1s));  # que yo sepa
substitute (v m sg pastpart) (v pastpart) ([es] v m sg pastpart) (-1 ([es] "haber"));  # había muerto

select ("saber" [es] v 1s pres) if (-1 ("no") or (pron.sub));  # yo no sé; yo sé
select ("ir" [es] v past) if (-1 ([es] pron.obl) or ([es] pron.refl));  # y nos fuimos;
select ("ir" [es] v past) if (1 ("a" [es] prep));  # fuimos adj ver
select ("ser" [es] v) if (not 1 (v));  # CHECK - seems a bit broad
select ("ser" [es] v) if (1 ("como" conj));
select ("creer" [es] v) if (1 ("que" conj));  # yo creo que
select ("ver" [es] v) if (1 ("que" conj));  # viste que
select ("bajar" [es] v) if ((1 (n)) or (2 (n)));  # baja la velocidad
select ("venir" [es] v) if (1 ("por"));  # vino por aquí
select ("pasar" [es] v) if (-1 ("qué" int));  # qué pasa


# Lexical selection

substitute (:remove:) (:retire:) ("retirar") (0* ("viejo"));  # adjust the meaning of "retirar" when "viejo" is nearby
substitute (:wear:) (:have_been:) ("llevar") (1 (v prespart));  # llevamos hablando tiempo

