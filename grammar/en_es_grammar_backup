#/* 
#*********************************************************************
#Copyright Kevin Donnelly 2010, 2011.
#kevindonnelly.org.uk
#This file is part of the Bangor Autoglosser.
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License and the GNU
#Affero General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option)
#any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#and the GNU Affero General Public License along with this program.
#If not, see <http://www.gnu.org/licenses/>.
#*********************************************************************
#*/ 

#  General notes
#  Combining or and not will not necessarily work: select (x) if (1 y) or (not 1 z) does not fire properly
#  If the tag substitution for English uses dotted notation, none of the other rules will bite, because they are all using spaced notation.
#  You can't combine conditions applying to adj -1 position OR adj 1 position.
#  Substitute lines have to be in order of greatest number of tags in the match section, otherwise rules will fire on some tags, and change the tags so that the larger match never matches.  For instance: sv infin pv.

DELIMITERS = "<.>" "<!>" "<?>";

LIST noun = n;
LIST verb = v;
LIST infinitive = (v infin);
SET inflected = (v) - (infin);  # ie the set of all verbs, minus the set of all infinitives; note that you cannot use LIST here
SET non_imper = (v) - (imper);
LIST preposition = prep;
SET pronoun = ([cy] pron);
LIST adjective = adj;
LIST adverb = adv;
LIST conjunction = conj;
LIST concessive = "oh" "well";
LIST exclamation = im;
LIST interrogative = im;
LIST phrase = h;
LIST placename = pn;

LIST preverbal = "<just>" "<actually>" "<still>" "<even>" "<like>" "<already>" "<first>";
LIST auxiliary = "be" "have" "do" "can";

LIST initvowel = "a.*"ri "e.*"ri "i.*"ri "o.*"ri "u.*"ri "w.*"ri "y.*"ri;
LIST amvinf = (vinf am);
LIST smvinf = (vinf sm);
LIST amnoun = (n am);
LIST nmnoun = (n nm);
LIST smnoun = (n sm);
LIST possessive = ("ei" :her:) ("ei" :his:);
LIST modal = "licio" "gobeithio" "gallu";
LIST countable = "munud" "ceiniog";
LIST prequal = "ofnadwy" "andros" "tipyn";
LIST softprep = "o" "i" "am" "ar" "wrth" "dan" "heb";

#SET amvnoun = amvinf or amnoun;
# note use of "or" (|) above; "and" (+) does not work because it yields all possible combinations of the elements in the two sets; since the n and vinf tags will never occur together, the set will never be valid; the following has the same effect:
LIST amvnoun = (vinf am) or (n am);


SECTION


##### Rules for Welsh #####

# Mutations

remove (sm) if (-1 (det.def)) (0 (n m));

remove (am) if ( (not -1 ("â")) or (not -1 ("gyda")) or (not -1 ("ni")) );

remove (h) if ( (not -1 ("ei" :her:)) or (not -1 ("ein" :our:)) );


# Particles

select interrogative if (@1 ("a")) (@-1 ("<?>"));
select ([cy] "na" adv) if (@1 ("na"));
select ([cy] "na" adv) if (-1 concessive);
select ([cy] "na" adv) if (1 inflected);
select ([cy] "na" conj :\(n\)or:) if (1 (am));

select ([cy] "yn" stat) if ( (1 infinitive) or (1 adjective) or (1 adverb) or (1 noun + (sm)) );

select ([cy] "y" det.def) if (not 1 inflected);

select ([cy] "ddim" adv) if (-1 pronoun) (-2 inflected)
select ([cy] "ddim" adv) if (-1 inflected);
select ([cy] "dim" adv) if (1 noun or infinitive);
select ([cy] "dim" adv) if (1 ("yn" stat)) (2 infinitive);
select ([cy] "dim" adv) if (1 (name));

select ([cy] "mor" :so:) if (not 2 ("â" conj));
select ([cy] "mor" adj) if (2 ("â" conj));

select ([cy] "â" conj) if (-2 ("mor" adj));
#select ([cy] "â" prep) if (not -2 ("mor" adj));

select ([cy] "cyn" prep) if (1 infinitive);

select ([cy] "ynte" adv) if (1 ("<?>"));

select ([cy] "do" adv) if (1 ("<.>"));
select ([cy] "do" adv) if (1 ("<?>"));

remove ([cy] "ni" part-neg) if (not 1 inflected);

select ([cy] "beth" int) if (1 inflected);

select ([cy] "fe" prt.aff) if (1 inflected);


# Conjunctions

select ([cy] "a" conj) if (-1 (name)) (1 (name));
select ([cy] "a" conj) if (not 1 (@1));


# Interrogatives

select ([cy] "beth" i) if (1 ("am" p));


# Prepositions

select (sm) if (-1 softprep);

select ([cy] "yn" prep) if (1 (det.def));
select ([cy] "yn" prep) if (1 (pron));
select ([cy] "yn" prep) if ( 1 ("ystod") or ("ymyl") );
select ([cy] "yn" prep) if (1 (name));

select ([cy] "wedi" prep) if (1 (infin));

#select ([cy] "i" prep) if (1 (sm));
select ([cy] "i" prep) if (not -1 inflected);

#select ([cy] "o" :of:) if (-1 prequal) (1 adjective);
select ([cy] "o" :of:) if (-1 prequal or ("maint"));
select ([cy] "o" :of:) if (-2 ("ychydig"));
#select ([cy] "o" :of:) if (not 1 (name));  # far too broad
select ([cy] "o" :from:) if (1 ("nos" :night:));
select ([cy] "o" :of:) if (1 ("blaen" sm));
select ([cy] "o" :of:) if (-1 ("chwech" adj));  # needs to be generalised to all numbers by retagging them as "num", not "a"
select ([cy] "o" :of:) if (1 infinitive + (sm));
select ([cy] "o" :from:) if (1 (name));

select ([cy] "allan" adv) if (-1 ("sefyll") or ("mynd"));


# Pronouns

select ([cy] "i" pron) if (-1 ("bod" 1s pres spoken));
select ([cy] pron) if (-1 inflected);
#select ([cy] pron) if (-1 infinitive);

select ([cy] pron) if ( (-2 possessive) or (-3 possessive) );
select ([cy] pron) if (-1 preposition);

select ([cy] "ei" :his:) if (1 (sm));

select ([cy] "ei" :his:) if (1 (sm));
select ([cy] "ei" :his:) if (1 initvowel) (not 1 (h));

select ([cy] "ni" :we:) if (not 1 (inflected));

#remove ([cy] "fo") if (not -1 (v)) (not -1 (n));
select ([cy] "fo" pron m sg :he:) if (-1 (v 3s));

# Nouns

remove nmnoun if (not -1 ("yn" "fy"));
select noun if (-1 ("y" det.def));

select ("ystod" :range:) if (-1 ("yn" prep));

select ("ysgol" :school:) if (-1 ("y" det.def)) (-2 ("yn" prep));
select ("ysgol" :school:) if (1 ("uwchradd") or ("Cymraeg") or ("dyddiol"));

select ("dim" n) if (-1 (prep));

select ("gwaith" :work:) if (-1 ("o" :of:));
select ("gwaith" :work:) if (-1 ("codi" :lift:));

select ("diolch" n) if (-1 ("dweud" infinitive));

select ("man" :place:) if (1 ("acw" adv) or ("hyn" pron));

select ("Mawrth" :March:) if (-1 ("mis" n));
select ("Mawrth" :Tuesday:) if (-1 ("nos" n));
select ("Mercher" :Wednesday:) if (-1 ("nos" n));

select ("ymarfer" n) if (-1 ("angen" n));

select ("Cymraeg" n) if (-1 ("siarad") or ("o") or ("dim") or ("yn"));
select ("Cymraeg" a) if (-1 noun);

select ([cy] "math" n) if (1 ([cy] "â" prep));  # fath â - the same as
select([cy] "â" conj)  if (-1 ([cy] "math" n));


# Adjectives

select ([cy] "ei" a :her:) if (1 amnoun);
select ([cy] "ei" a :his:) if (1 smnoun);
select ([cy] "ei" a :his:) if (1 (int)) (2 smnoun);
select ([cy] "ei" a :her:) if (1 noun) (2 ("hi" pron));
select possessive if (1 noun);

select ([cy] "iawn" :OK:) if (-1 ("yn" stat));
select ([cy] "iawn" :OK:) if (-1 concessive);
select ([cy] "iawn" :OK:) if (@1 ("iawn")) (@-1 ("<.>"));
select ([cy] "iawn" :very:) if (-1 adjective);

select ([cy] "deg" :ten \(10\):) if (1 countable);

select ([cy] "unig" adj :only:) if (-1 (det.def));

# Verbs

select ([cy] "bod" fut) if (not 1 ("yn" stat));
select ([cy] "bod" 3p pres) if (1 pronoun);
select ([cy] "bod" v infin) if (-1 ("heb" prep));
select ([cy] "bod" inflected pres) if (0 ("<oes>")) (1 ("<.>"));

select ([cy] v infin) if (-1 ("yn" stat));
select ([cy] v infin) if (-1 ("i" pron));  # dw i meddwl
select ([cy] v infin) if (-1 possessive);
select ([cy] v infin) if (-1 modal);
select ([cy] v infin) if (-1 preposition);
select ([cy] v infin) if (-1 ("bod" inflected));
select ([cy] v infin) if (1 ("<.>"));
#select inflected if (1 ("<.>"));
select ([cy] v infin) if (-1 pronoun);
select ([cy] v infin) if (-1 ("<sy>"));
select inflected if (1 pronoun);
select (1p) if (1 ([cy] "ni" pron));

select (imper) if (not @1 ("ni"));

remove inflected if (not 1 pronoun);
remove inflected if (-1 infinitive) (0 (v));


#Adverbs

select ([cy] "allan" adv) if (-1 ("pell"));

select ([cy] "iawn" :OK:) if (not -1 adjective);


# Global rules

# 1- homonym selection - has the effect of "deleting" items from the dictionary
select ("gofyn" [cy] :ask:);
select ("cyrraedd" [cy] :arrive:);
select ("rhyw" [cy] :some:);
select ("cyfeiriad" [cy] :direction:);
select ("mynd" v 1p pres);
select ("darn" [cy] :pieces:);
select ("aros"[cy]  :wait:);
select ("tynnu"[cy]  :drag:);
select ("hanes" [cy] :story:);
select ("ysgol" [cy] :school:);
select ("trefnu"[cy]  :arrange:);
select ("wrth" [cy] :by:);
select ("fel" [cy] :like:);
select ("be" [cy] :what:);
select ("sôn" v);
select ("ymyl" [cy] :edge:);

#remove (v subj);
remove ("fod" [cy] conj :that:);
remove ("cael" [cy] :get:);
remove ("gwadu" v sm 2s pres);
remove ("meddu" v 3s imperf);
remove ("tebygol" a sm :probable:);
#remove ("gyrru" v 3s pres :drive:);
#remove ("gyrru" v 2s imper :drive:);
remove ("ban" [cy] :peak:);

# 2 - delete archaic forms
remove (archaic);



##### Rules for English #####

#remove ([en] infin) if (not 1 pronoun);

remove ([en] conj pv);  # he likes; 


### Rewrite English tags ###

substitute (asv) (v+ing) ([en] n) (-1 ([es] v));  # combine with [1] below?
# The order of the source tags defines where the target tag will be placed;  here, the v+ing will go in the position occupied by asv; if you turn this around, to (n sg asv), the v+ing will go in the position of n sg.  The above also keeps the + in + asv; if the + is included in the source (+ asv n sg) then it will also be removed from the line.  You need to include [en] in the target environment, otherwise it applies to ALL words tagged n, including Spanish ones.
#substitute (n) (v+ing) (n) (-1 ([es] v));

substitute (gb) (have.v.3s.pres) ("<he's>") (1 ([en] av past+p));  # he's got it
substitute (gb) (have.v.3s.pres) ("<she's>") (1 preverbal) (2 ([en] av  past+p));  # she's just got one

substitute (gb) (be.v.3s.pres) ("<that's>");
substitute (gb) (be.v.3s.pres) ("<it's>");
substitute (gb) (be.v.3s.pres) ("<he's>");  # he's got it
substitute (gb) (be.v.3s.pres) ("<she's>");  # she's gonna be
substitute (gb) (be.v.3s.pres) ("<there's>");  # there's no raise
substitute (gb) (us.pron.sub.1p) ("<let's>");  # let's bring

substitute (gb) (=poss) ([en] n sg) (1 ([en] n));  # the daughter's pet

substitute (n sg pv) (n pl) ([en] n sg pv);  # because pools are good; kids; houses

substitute (as) (adj) ([en] as) (1 ([en] n) or ([en] pron));  # a miniature rabbit; miniature ones
substitute (as) (n sg) ([en] as) (-1 ([en] det.def) or ([en] det.indef));  # a miniature # CHECK is this necessary? overlaps the one above

#substitute (adj comp.ag) (adj.comp) ([en] comp.ag) (1 (n));  # smaller box
substitute (adj comp.ag) (adj.comp) ([en] adj comp.ag);  # is cheaper but - CHECK - try this wider version for a while

substitute (sv infin comp.ag) (n sg ag) ([en] sv infin comp.ag) (-1 (det.indef) or (det.def) or (name));  # un camper; un M_P_three player; the bumper;
substitute (sv infin comp.ag) (n sg ag) ([en] sv infin comp.ag) (-2 (det.indef) or (det.def)) (-1 (adj));  # a special sticker

substitute (sv infin pv) (v 3s pres) ([en] pv) (-1 ([en] dem.far) or (pron.sub 3s) or (pron));  # that starts; he presses
substitute (sv infin) (v 12s13p pres) ("<don't>");  # you don't 
substitute (sv infin) (v prespart) ("<gonna>");  # gonna have

substitute (13s) (3s) ([en] v 13s) (not -1 (pron.sub 1s));  # American_Outdoors was
substitute (12s13p) (1s) ([en] v 12s13p) (-1 (pron.sub 1s));  # I don't
substitute (12s13p) (2sp) ([en] v 12s13p) (-1 (pron.sub 2sp));  # you don't
substitute (12s13p) (3p) ([en] v 12s13p) (-1 (pron.sub 3p));  # they don't
substitute (12s13p) (3p) ([en] v 12s13p) (0 ("<don't>")) (1 (pron.sub 3p));  # don't they # should be marked 12s123p - combine with ones below
substitute (2s123p) (1p) ([en] v 2s123p) (-1 (pron.sub 1p) or (n pl));  # we were; 
substitute (2s123p) (3p) ([en] v 2s123p) (-1 (pron.sub 3p) or (n pl));  # they were; the taxes were
substitute (123p) (1p) ([en] v 123p) (-1 (pron.sub 1p));  # we are
substitute (123p) (2sp) ([en] v 123p) (-1 (pron.sub 2sp));  # you are
substitute (123p) (3p) ([en] v 123p) (-1 (pron.sub 3p));  # they are
substitute (123sp) (1s) ([en] v 123sp) (-1 (pron.sub 1s));  # I can
substitute (123sp) (2sp) ([en] v 123sp) (-1 (pron.sub 2sp));  # you can
substitute (3p) (2sp) ([en] v 3p) (0 ("be") or ("can") or ("have") or ("do")) (1 (pron.sub 2sp));  # are you  # SEC
substitute (123sp) (3s) ([en] v 123sp) (-1 (pron.sub 3s));  # he can

substitute (sv infin asv) (v prespart) ([en] sv infin asv) (1 (det.def ) or (det.indef ) or ([en] dem.far) or ([en] "for") or (conj));  # finding that; working for; thinking que; 
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-1 ([en] "be") or preverbal or (:go:) or ([en] "do"));  # we were looking; vamos camping; as they do selling
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-1 ([en] v) or (sv));  # that starts cooling; keep telling; keep talking
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-2 ([en] v) or (sv)) (-1 ("on" prep));  # keep on talking
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-2 ([en] v)) (-1 ("not"));  # you are not seeing - constrain to "be"?
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-2 ([en] v)) (-1 ("up" adv));  # we ended up finding
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (1 ([en] n));  # a camping spot;
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-1 ([en] pron.sub) or ("than") or ("on"));  # worth it being; than watching; planning on doing
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-1 (>>>));  # talking.

substitute (sv infin asv) (n sg ger) ([en] sv infin asv) (-1 (prep+det.def) or (det.def) or (det.indef));  # del meeting; the hiring;
substitute (sv infin asv) (adj) ([en] sv infin asv) (-1 ("very"));  # they get very upset
substitute (sv infin asv) (v prespart) ([en] sv infin asv) (-1 (n));  # my husband being

substitute (sv infin av) (v pastpart) ([en] sv infin av) (-1 ([en] "be") or (be.v.3s.pres) or ([en] "have") or preverbal);  # it's slanted;
substitute (sv infin av) (v pastpart) ([en] sv infin av) (-2 ([en] "be") or (be.v.3s.pres) or ([en] "have")) (-1 ("not") or preverbal);  # have not increased
substitute (sv infin av) (v pastpart) ([en] sv infin av) (-2 ([en] "be")) (-1 ([en] pron.sub));  # is it called
substitute (sv infin av) (v pastpart) ([en] sv infin av) (1 (name));  # unincorporated Dade_County
substitute (sv infin av) (v pastpart) ([en] sv infin av) (1C (n) or (sv));  # smoked barbecue - C means it must be unambiguously sv, ie there cannot be several readings of which sv is one - required to prevent "they played all eighteen" getting tagged pastpart instead of past

substitute (sv infin av) (v past) ([en] sv infin av) (-1 ([en] pron.sub) or (name) or ("<what>") or (n));  # they closed; Pepita moved; but what happened was; a small person wanted (not optimal here - parenthesis)
substitute (sv infin av) (v past) ([en] sv infin av) (-2 ([en] pron.sub)) (-1 preverbal);  # they just closed

substitute (av past) (v past) ([en] av past) (-1 ([en] pron.sub)) (not -1 (have.v.pres)) (not -2 ("have"));  # we bought; !you've done
#substitute (av past) (v past) ([en] av past) (not 1 ([en] n));  # that came about - too broad?
substitute (av past) (v past) ([en] av past) (1 ([en] pron.sub));  # that made it
substitute (av past) (v past) ([en] av past) (-1 ([en] n));  # the kids came

substitute (av past) (v pastpart) ([en] av past) (-1 (have.v.pres) or ("have") or ("be") or (det.def) or (det.indef));  # you've done; you have done; it was misspent; un rebuilt
substitute (av past) (v pastpart) ([en] av past) (-2 ("have")) (-1 (pron.sub));  # have you heard

substitute (sv infin pv) (v pres 3s) ([en] sv infin pv) (-2 ([en] adj.poss) or ([en] adj)) (-1 ([en] n sg));  # his wife puts
substitute (sv infin pv) (v pres 3s) ([en] sv infin pv) (-2 ([en] n)) (-1 preverbal);  # the whole thing like opens up;
substitute (sv infin pv) (n pl) ([en] sv infin pv) (-1 ([en] adj) or ([en] n) or ("det.*"r) or ("at" prep));  # other offers; speed bumps

substitute (sv infin) (v 1s pres) ([en] sv infin) (-1 ([en] pron.sub 1s));  # I mean
substitute (sv infin) (v 1p pres) ([en] sv infin) (-1 ([en] pron.sub 1p));  # we do
substitute (sv infin) (v 2sp pres) ([en] sv infin) (-1 ([en] pron.sub 2sp));  # you know; you get
substitute (sv infin) (v 2sp pres) ([en] sv infin) (-2 ([en] pron.sub 2sp)) (-1 preverbal);  # you just get
substitute (sv infin) (v 3s pres) ([en] sv infin) (-1 ([en] pron.sub 3s)) (not -1 (be.v.3s.pres));  # he keep[s]
substitute (sv infin) (v 3p pres) ([en] sv infin) (-1 ([en] pron.sub 3p) or (n pl)) (not -1 (be.v.fut));  # they build; employees have; !they'll be catching;

substitute (sv infin) (v infin) ([en] sv infin) ((-1 ("to" [en] prep)) or (-2 ("to" [en] prep)));  # to actually put it
substitute (sv infin) (v infin) ([en] sv infin) (-1 ("<gonna>") or ("<gotta>") or ("<don't>") or ("<wanna>") or preverbal);  # gonna be; gotta wait; don't have to
substitute (sv infin) (v infin) ([en] sv infin) (1 ([en] pron));  # match everything
substitute (sv infin) (v infin) ([en] sv infin) (1 ([en] det.def)) (2 (n));  # install the hammock
substitute (sv infin) (v infin) ([en] sv infin) (-1 ([en] "can"));  # couldn't find it
substitute (sv infin) (v 2sp pres) ([en] "have" sv infin) (1 (pron.sub 2sp)) (2 (av past));  # have you heard
substitute (sv infin) (v infin) ([en] sv infin) (-1 (>>>));  # change.
substitute (sv infin) (v infin) ([en] sv infin) (-1 (conj));  # and open it

substitute (sv infin) (v imper) ([en] sv infin) ((-1 ("oh")) or (0 ("<let's>")));  # oh look!; let's bring
substitute (sv infin) (v imper) ([en] sv infin) (-1 ("well"));  # well bring me # this is not a very good rule!
substitute (sv infin) (v imper) ([en] sv infin) (1 ("God"));  # thank God

substitute (infin) (v imper) ([en] infin) (0 ("<let's>"));  # thank God

substitute (sv infin) (n sg) ([en] sv infin) (-1 ([en] adj)) (-2 ([en] det.def) or ([en] det.indef));  # a good deal
substitute (sv infin) (n sg) ([en] sv infin) (-1 ("det.*"r) or ("at" prep) or (v pastpart) or (det.indef));  # a raise; the cut; at work; smoked barbecue; un barbecue
substitute (sv infin) (n sg) ([en] sv infin) (-1 ([en] n) or ([en] "more") or ([en] "no") or (det.def) or (det.indef));  # speed bump; more work; no raise; the cut down (cut-down?); el spring break;
substitute (sv infin) (n sg) ([en] sv infin) (-1 (adj.poss));  # her back

substitute (be.v.3s.pres) (have.v.3s.past) ("<it's>") (1 (av past+p) or ("be" v pastpart));  # it's got; it's been
substitute (be.v.3s.pres) (have.v.3s.past) ("<he's>") (1 (av past+p));  # he's got it; 

substitute (av past+p) (v pastpart) ([en] av past+p) (-1 ([en] "have") or ("<he's>") or ("<she's>") or (have.v.3s.past) or preverbal);  # he's got it; it's got; 
substitute (av past+p) (v past) ([en] av past+p) (-1 ([en] pron.sub) or (name));  # she got; Pepa had
substitute (av past+p) (v past) ([en] av past+p) (-1 ([en] n)) (1([en] v pastpart));  # the car had been

substitute (pron.sub) (pron.obj) ([en] pron.sub) (-1 ([en] v infin));  # and open it
substitute (pron.sub) (pron.obj) ([en] pron.sub) (-1 ([en] v) link not 2 ([en] v)) (not 0 (be.v.3s.pres));  # they take it away; !I mean it's ...;
substitute (pron.sub) (pron.obj) ([en] pron.sub) (-1 ("<that's>") or ("worth"));  # that's it; worth it
substitute (pron.sub) (pron.obj) ([en] pron.sub) (-1 ([en] "for" prep)) (not 1 ([en] v));  # for you; !for, you know, they; 
substitute (pron.sub) (pron.obj) ([en] pron.sub) (-1 ([en] prep)) (1 (<<<));  # in it.; 
substitute (pron.sub) (pron.obj) ([en] pron.sub) (-1 ([en] prep));  # talk to you - CHECK this broader version

substitute (pron.obj) (pron.sub) ([en] pron.obj 3s) (-1 ("<isn't>") or ("<is>"));  # isn't it; is it
substitute (pron.obj) (pron.sub) ([en] pron.obj) (-1 ("be" v) or ("have" v));  # are we

substitute (pron.obj) (pron.indir) ([en] pron.obj) (-1 ("buy") or ("send") or ("bring")) (1 ([en] det.def) or ([en] det.indef) or ([en] adj) or ([en] n));  # I bought him a; to send you the stuff; !they bought things

substitute (pron.refl) (pron.refl.indir) ([en] pron.refl) (-1 ("buy"));  # he bought himself

substitute (pron sg pl) (pron pl) ([en] pron sg pl)  # the miniature ones

substitute (adv) (ly) ([en] adj adv);  # originally, fairly  # CHECK
#substitute (adj) (adv) ([en] adj) (-1 ([en] v)) (not 1 ([en] n) or ([en] dem.far));  # to work double; !all that extra money - DELETE - too broad
substitute (adj) (adv) ("first") (1 (v));  # when we first moved

substitute (adv) (pron) ("<there's>"); 

substitute (adv) (adj) ("more") (1 (n));  # five more minutes

substitute (v 1s pres) (v infin) ([en] v 1s pres) (-1 (be.v.fut));  # I'll have

substitute (adj) (pron) ([en] "own" adj) (-1 (adj.poss)) (not 1 (n));  # on my own

substitute (rel) (adv) ("where" [en] rel) (1 ("be" [en] v));  # where is

substitute (prep) (adv) ([en] "off" prep) (not -1 (det.def) or (det.indef) or (n));  # off already
substitute (prep) (adv) ([en] "on" prep) (-1 ("keep"));  # keep on talking


### English disambiguations ###

select ([en] dem.far) if ((-1 ("like" conj) or ("and" conj)) or (1 ("be" [en] v 3s)));  # like that; that is
select ([en] dem.far) if (0 ("<that>")) (1 (adj) or (n));
select ([en] dem.far) if (not -1 ([en] n)) (0 ("<that's>"));  # so that's something; !one of these guys that's crazy
select ([en] dem.far) if (1 (<<<));  # finding that. ; 

#select ("that" [en] conj) if (not 1 (adj) or (n));  # CHECK - too broad?
select ("that" [en] conj) if (1 (pron.sub)) (2 (v));
select ("that" [en] conj) if (1 ("have" [en] v 3s));  # that has
select ("that" [en] conj) if (1 ([en] "det.*"r));  # that the; that a
select ("that" [en] conj) if (-2 ([en] det.def )) (-1 (pron) or (n)) (1 (v));
select ("that" [en] conj) if (-1 ("now") or ("so"));  # now that; so that
select ("that" [en] conj) if (1 ("<it's>"));  # that it's 
select ("that" [en] conj) if (-1 ([en] n));  # one of these guys that's crazy

select  ([en] pron) if (not -1 (n) or (num));  # this one; three zero one
select ([en] num) if (-1 ([en] num));  # three zero one
#select  ([en] pron) if (-1 (adj));  # little ones;
select  ([en] pron.indir) if (1 ([en] det.indef));  # buy her a
select  ([en] pron.obj) if (1 ([en] "to" prep));  # want her to have

select ([en] num) if (1 (n));  # one advantage

select ("like" sv infin) if (-1 ("do" [en] v pres neg));  # you don't like
select ("like" sv infin) if (1 ("to" [en] prep));  # a lot of them like to go
select ("like" v) if (-1 (pron.sub)) (not -1 ("<I'm>"));  # he likes; you like
select ("like" [en] conj) if (1 ([en] det.indef) or ("what" w) or (pron.sub));  # like a house; like what; like we were
select ("like" [en] conj) if (-1 preverbal or (v) or ("<I'm>"));  # just like; they played, like, ...; I'm like;
select ("like" [en] conj) if (not -1 (pron.sub)) (1 (n));  # like restaurants
select ("like" [en] conj) if (1 (v prespart) or (num));  # like cleaning; like fifteen years

select ("even" [en] adj) if (not 1 (v));  # it's not even (=level)
select ("even" [en] adv) if (1 (v));  # they don't even wanna
remove ([en] adj.poss) if (1 ("some"));  # we brought her some ribs
select ([en] adj) if (-1 ("too"));  # too early

select ([en] adv :back:) if (1 ([en] adv :here:) or ([en] adv :there:) or ([en] prep));  # back here; 
select ([en] adv :over:) if (1 ([en] adv :here:) or ([en] adv :there:));  # over there
select ([en] adv :back:) if (-1 ([en] pron.sub)) (-2 auxiliary);  # are you back;
select ([en] adv :back:) if (-1 ([en] "come"));  # coming back;
select ([en] "home" adv) if (not -1 ([en] det.indef) or ([en] det.def) or ([en] adj));  # I'm not home
select ([en] "over" adv) if (-1 ([en] "almost" adv));  # almost over
select ([en] "around" adv) if (not 1 ([en] det.def) or ([en] det.indef) or ([en] num));  # drive around so much
select ([en] "just" adv) if (1 ([en] v) or ("to" prep));  # she's just got; just to one

select ([en] n sg) if (-1 ([en] det.indef) or ([en] det.def));  # in the back
select ([en] n sg) if (1 ("of")) (2 ([en] det.indef));  # kind of a

select ([en] adj.poss) if (1 ([en] n) or ([en] "own"));  # her companion; her own insurance
#select ([en] pron.obj) if (not 1 (n));  # we brought her some

#remove ([en] adj) if (not 1 ([en] n));  # and open it  # CHECK!

select ([en] v infin) if (1 (pron.obj) or (pron));  # and then match everything
select ([en] v) if (-1 (pron));  # everything opens up
select ("open" [en] v) if (1 ("up" adv));  # you open up



# Global rules

# Incorrect segmentation of -er - perhaps better to do rules excluding these by context, since in some cases they can actually occur, eg a four-master ...
remove ("a"  [en] det.indef :a: pv);  # a-s
remove ("aft"  [en] adv :aft: comp.ag);  # aft-er
remove ("broth" [en] n sg :broth: comp.ag);  # broth-er
remove ("mast" [en] n sg :mast: comp.ag);  # mast-er
remove ("east" [en] n sg :east: comp.ag);  # east-er
remove ("open" [en] adj :open: pv);  # open-s
remove ("clean" [en] adj :clean: asv);  # clean-ing



##### Rules for Spanish #####

### To Do ###
# Rewrite viejito - old_guy.N.M.SG.DIM -> old_guy.DIM.N.M.SG - perhaps better to put this in write_cgautogloss.php.
# Rewrite to remove v, n, adj, adv?
# Rule to convert dem.adj to dem.pron when no accent is written.
# Rule to convert adjectives to pronouns when there is no noun attached.


# Articles

select ([es] det.def) if (1 (n f) or (adj f) or (ord f) or ([en] adj) or ([en] n)); # los dry walls
select ([es] det.def) if (1 (n m) or (adj m) or (ord m));
select ([es] det.def) if (-1 ("de" prep :of:));
select ([es] det.def) if (not 1 (v));  # los ladrillos ... los 
select ([es] det.def nt sg) if (1 ("que" [es] conj));  # en lo que

select ([es] det.indef f) if (1 (n f) or (adj f) or (ord f));
select ([es] det.indef m) if (1 (n m) or (adj m) or (ord m));
select ([es] det.indef) if (1 ([es] det.indef)) ;  # una ... un hammock
select ([es] det.indef) if (not 1 (n));  # una ... como se llama

substitute (pron m sg) (num) ("un" [es] pron m sg) ((-1 (num)) or (1 (num)));  # tres cero uno cuatro
select ("un" [es] pron) if (not 1 (n));  # no has visto una


# Conjunctions

select ("que" :that:) if (-1 ("<lo>"));  # lo que están haciendo
select ("que" :that:) if (not -1 (adj));
select ("que" :that:) if (1 (pron.obl)) (2 (v));  # que le dio

select ("que" conj :that:) if (-1 ("tener"));  # tiene que
substitute (conj) (pron.rel) ("que" [es] conj :that:) (-1 (det.def) or ("<del>") or ("<al>") or (det.indef) or (pron.dem));  # el chico del que me hablaste; lo que están haciendo; yo tengo una que cada vez; son los que tienen; eso que es; 
substitute (conj) (pron.rel) ("que" [es] conj :that:) (-1C (n));  # el hombre que me habló;

select ([es] im) if (not 1 ([es] adj));  # bueno; claro - this works, but really shouldn't!
select ("como" [es] conj) if ((1 (pron.sub) or ("que" [es] conj) or ("aquí" [es] adv) or ("en" [es] prep)) or ((-1 ("ser" v))));
select ("como" [es] conj) if (1 (v) or (name) or ([en] n) or (num));  # como está; como mataron; como Miami, como guinea_pig; como dos


# Prepositions

select ("para" [es] prep :for:) if (1 (pron.obj) or (pron.dem) or (v infin) or ("que" conj) or (det.def) or (adj.poss));  # para mi cámara; 
select ("para" [es] prep) if (1 ("dentro" adv) or ("arriba" adv) or ("allá" adv) or ("acá" adv) or ("abajo" adv));  # para dentro; para arriba; para allá; para abajo
select ("entre" [es] prep :between:) if (not 1 ("en"));


# Nouns

select ([es] n m sg) if (-1 ([es] det.def  m sg) or ([es] det.indef m sg));
#remove ([es] n m sg) if (not -1 ([es] det.def  m sg) or ([es] det.indef m sg));  crap!
select ([es] n m pl) if (-1 ([es] det.def  m pl) or ([es] det.indef m pl));
select ([es] n f sg) if (-1 ([es] det.def  f sg) or ([es] det.indef f sg)) (not 1 (n));;
select ([es] n f pl) if (-1 ([es] det.def  f pl) or ([es] det.indef f pl));

select ([es] n) if (1 ("del" prep+det.def) or ("de" prep));
select ([es] n) if (-1 ("de" prep) or ("en" prep));  # de concreto; en español
select ([es] n) if (-1 ("cualquier") or ("qué")) (not 0 ("pasar"));  # cualquier cosa; qué cosa; 0 is kludge to avoid "qué pasa"
select ([es] n) if (-1 ([es] adj.dem));  # esa cosa
select ([es] n) if (-1 ([es] adj.poss));  # su idea
select ([es] n) if (-1 ([es] ord));  # el primer viaje


select ("gusto" n) if (-1 ("mucho" adj));
select ("casa" n f sg :house:) if (-1 (prep));


# Demonstratives

select ("este" adj.dem m sg) if (1 (n m sg));


# Pronouns

substitute (pron.sub) (pron.obj) ([es] pron.sub) (-1 ("a" [es] prep));  # a nosotros
#substitute (pron.obj) (pron.indir) ([es] pron.obj) (-1 ([es] pron.sub)) (1 ([es] pron.obj)) (2 ([es] v));  # yo te la voy; yo te la hago
#substitute (pron.obj) (pron.indir) ([es] pron.obj) (-1 ([es] pron.sub)) (1 ([es] v));  # yo me recuerdo
#substitute (pron.obj) (pron.indir) ([es] pron.obj) (-1 ([es] "no" adv)) (1 ([es] v));  # no te ha dado
# the above are covered now by using pron.obl for me, te, le, nos, os, les

select ([es] pron.refl) if (1 (v 3s) or (v 13s) or (v 23s) or (v 3p));
select ("se" [es] pron.indir) if (1 (pron.obj)) (2(v));  # se lo hizo
select ("se" [es] pron.refl) if (1 (pron.obl) or (v));  # se me olvidó; se nos ha occurrido 
select ([es] pron.obj) if (1 ("que" conj));
select ([es] pron.sub 1s) if (1 ([es] v 1s));  # yo recuerdo;

select ([es] pron) if (1(v));  # cuando uno manda

select ("él" [es] pron.obj) if (1 (v));
select ("otro" pron) if (not 1 (n));
select ("uno" [es] pron) if (1 ("de"));
select ("todo" [es] pron) if (1 (v) or (<<<));  # se riega todo
select ("todo" pron) if (-1 ("con" prep));  # pero con todo
select ("uno" [es] pron) if (1 ("<.>"));  # has visto uno. ;
select ("alguno" [es] pron) if (not 1 (n));  # algunos de los; 
select ("nada" [es] pron) if (1 ("<del>") or ("más"));  # no son nada del; nada más
select ("nada" [es] pron) if (-1 (v) or ("ni" conj));  # nunca han hecho nada; ni nada


# Adverbs

select ([es] adv) if (-1 ("más"));  # más cerca a
#select ([es] adv) if (not -1 (adj));  # es igual

select ("mañana" adv) if (not -1 ("la" det.def));
select ("temprano" adv) if (-1 ("muy"));
#select ("sí" [es] adv) if (not 1 (v));  # sí los bloquecitos  # replaced by adverb rule below
select ("sí" [es] adv) if (not -1 (prep));  # sí son las; sí los bloquecitos
select ("arriba" adv) if (-1 ("para" prep) or ("hasta" prep) or ("algo" pron));
select ("arriba" adv) if (0* ("poner" v));  # ponerle arriba - 0* means anywhere in the sentence
select ("arriba" adv) if (1 ("del") or ("de"));  # arriba del
select ("así" [es] adv) if (1 inflected or ("mismo") or ("que"));  # así hablas; así mismo; así que
select ("poco" adv) if (-1 (v));  # se falta poco
select ("mucho" adv) if (-1 (v));  # no crezca mucho
select ("bien" adv) if (1 (adj));  # bien práctico
select ("bastante" adj) if (not 1 (n));  # hemos hablado bastante;
select ("menos" adv) if (-1 ([es] det.def nt)) (1 ("que"));  # lo menos que
select ("bien" adv) if (1 (adj));  # bien práctico
select ("fuera" adv) if (1 ("de" prep));  # fuera de Miami


# Adjectives

substitute (adj.poss) (pron.poss) ([es] "of_.*"ri adj.poss) (not -1 ([es] n));  # los suyos
substitute (adj.dem) (pron.dem) ([es] adj.dem) (not 1([es] n)); # un hammock de esos;

select ([es] adj m sg) if (-1 ([es] n m sg) or (det.indef));  # un poco
select ([es] adj) if (1 (n));  # tiene bastante espacio; otro zip code
select ([es] adj.int) if (1 (n));  # cuantos palazos
select ([es] adj) if (-1 ("más" adv));  # lo más pesado

select ("mucho" adj) if (1 (n));  # mucho speed bump
select ("tarde" n) if (-1 (det.def));
select ("mejor" adj) if (1 (n));
select ("todo" [es] adj) if (1 (det.def));
select ("todo" [es] adj) if (1 ([es] adj.dem) or ([es] pron.dem) or (adj));  # toda esa cosa; todo eso; toda suelta
select ("menos" adv) if (-1 ("o" conj)) (-2 ("más" adv));  # más o menos
select ("media" adj) if (1 (n));  # la media hora
select ("bastante" adj) if (1 (n));
select ("muerto" adj) if (-1 (n));  # toda esa hierba muerta

remove ("este" n m sg) if (not -1 (det.def));  # porque este the one; 


#  Verbs

select (v) if (-1 ("así" [es] adv));
select (v pastpart) if (-1 ("haber") or ("estar") or ("ser"));  # siendo incorporados
select (v infin) if (-1 ("para" [es] prep :for:));
#select (v 3s pres) if (-1 ("donde" l :where:) or (pron) or (pron.sub));
#select ([es] v pres) if (-1 ("si" [es] c));  # si entra (to remove imperative)
select ([es] v 2s non_imper) if (-1 ([es] pron.sub 2s));  # tú viste
#select ([es] v pres) if (-1 ([es] pron.refl) or ([es] conj));  # se asfalta; que vale
select non_imper if (-1 ([es] pron.refl mf 23sp) or ([es] conj) or ([es] pron.rel));  # se pudiera; se asfalta; que vale; lo que pasa
select ([es] v 23s pres) if (-1 ([es] pron.obl));  # te da
select ([es] v) if (-1 ([es] pron.sub));  # que yo sepa; ellos son;
select non_imper if (-1 ("no")) (0 ([es] v));  # no vale la pena
select ([es] v imper) if (-1 (>>>));  # mira ahí (beginning of utterance)

substitute (123s) (1s) ([es] v 123s subj.pres) (-1 ([es] pron.sub mf 1s));  # que yo sepa
substitute (v m sg pastpart) (v pastpart) ([es] v m sg pastpart) (-1 ([es] "haber"));  # había muerto

select ("saber" [es] v 1s pres) if (-1 ("no") or (pron.sub));  # yo no sé; yo sé
select ("ir" [es] v past) if (-1 ([es] pron.obl) or ([es] pron.refl));  # y nos fuimos;
select ("ir" [es] v past) if (1 ("a" [es] prep));  # fuimos adj ver
select ("ser" [es] v) if (not 1 (v));  # CHECK - seems a bit broad
select ("ser" [es] v) if (1 ("como" conj));
select ("creer" [es] v) if (1 ("que" conj));  # yo creo que
select ("ver" [es] v) if (1 ("que" conj));  # viste que
select ("bajar" [es] v) if ((1 (n)) or (2 (n)));  # baja la velocidad
select ("venir" [es] v) if (1 ("por"));  # vino por aquí
select ("pasar" [es] v) if (-1 ("qué" int));  # qué pasa


# Lexical selection

substitute (:remove:) (:retire:) ("retirar") (0* ("viejo"));  # adjust the meaning of "retirar" when "viejo" is nearby
substitute (:wear:) (:have_been:) ("llevar") (1 (v prespart));  # llevamos hablando tiempo


# Global rules

# 1 - remove less common tenses - has the effect of "deleting" items from the dictionary
#select (v 3s pres);
remove (subj.pres);
remove ("unir" [es] v 1s pres);  # que hagamos uno

# 2 - remove annoying words - needs to be looked at again!
remove ("vestir"); # pero viste las cositas
