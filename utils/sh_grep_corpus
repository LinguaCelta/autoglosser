#!/bin/sh

#/* 
#*********************************************************************
#Copyright Kevin Donnelly 2010, 2011.
#kevindonnelly.org.uk
#This file is part of the Bangor Autoglosser.
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License and the GNU
#Affero General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option)
#any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#and the GNU Affero General Public License along with this program.
#If not, see <http://www.gnu.org/licenses/>.
#*********************************************************************
#*/ 

# This script uses ack-grep to find instances of a particular string in all the files in the corpus.
# http://betterthangrep.com/

# If using grep, uncomment the following line:
#export GREP_OPTIONS='--color=auto' GREP_COLOR='1;37;41' # Get grep to highlight the matches in colour (red by default)
# With color=auto, grep will not display colour escape sequences if the output is redirected to a file.
# Adjust the colour from the default red by adding GREP_COLOR='xxx' to the above line:
# export GREP_OPTIONS='--color=auto' GREP_COLOR='100;8'
# 1;32 produces a bright green.
# 7 displays matches in inverse video
# 1;37;41 shows white text on a red background

FILES=inputs/siarad/beta/*.cha
#FILES=devstuff/webster/*

# set up the regex for grep to use
#STRING='[[:blank:]]dyn nhw'  # dyn nhw preceded by a space (line-medial) or tab (line-initial) - otherwise you get instances of iddyn nhw
#STRING='[^(id)]dyn nhw'  # an alternative to the above, 
#STRING='[Dd]d\?ydd[ _]' 
#STRING='[Ss]panish'
#STRING='wrtha ni'
#STRING='[^@][a-z]:[a-z]'
#STRING='dorma'
#STRING='asustarla'
#STRING='[[:blank:]]o@s:cym&spa '
#STRING='[a-z]-[a-z]'
#STRING='[[:blank:]]i (ffwrdd|fynylawr|gyd|mewn|fewn) '
#STRING='([[:blank:]]yn) ((Ã´l) )'
#STRING='([[:blank:]]anodd )'
#STRING='\*[A-Z]{3}:\t.*ll'  # select ll only in speaker tier (for Sarah's project) - grep -v '\[- spa\]' sarah_ll.txt > output.txt to remove precode lines (ie lines in Spanish); %snd:.[^_]*_ to remove old-style sound-bullets
#STRING='[[:blank:]]nine_deg'
#STRING='\(\.\.\)'
#STRING='[[:blank:]]waw'
#STRING='%eng:\t.* xxx '  
#STRING='\*[A-Z]{3}:\t\+".*'  
#STRING='%eng:\t".*'  
#STRING='%com:\t'
#STRING='(\(\.*\))( *)(\[\/*\])'  # pause before retrace
#STRING='@ID.*\|\|$'
#STRING='[[:blank:]]uh[[:blank:]]'
#STRING='[[:blank:]]w[[:blank:]]'
#STRING='[^w]ww '
#STRING='www [^\.]'
#STRING='\*[A-Z]{3}:\t.*hotel'
#STRING='\.SM'
#STRING='spa(\.|\?|!)'
#STRING='[[:blank:]]&= '
#STRING='%eng:	"'
#STRING='\.\) \['
#STRING='\*[A-Z]{3}:\t.*[a-z](\?|!)'
#STRING='\*[A-Z]{3}:\t.*[a-z](\.)'
#STRING='\*[A-Z]{3}:\t.*  '
#STRING='@Transcriber.*Original'
#STRING='@Media.*[A-Z]'
#STRING='%eng:\t"'
#STRING='<.*> \["\]'
#STRING='\*[A-Z]{3}:\t.*"'
#STRING='[[:blank:]](.+)[[:blank:]]\1[[:blank:]]'
#STRING='(.+)[[:blank:]]\1'
#STRING='\*[A-Z]{3}:\t.*to have'
#STRING='\[- eng\]'
#STRING="[[:blank:]]dyn ni"
#STRING='\*[A-Z]{3}:\t.*di bod'
#STRING='\*[A-Z]{3}:\t.*sy\(dd\)'  
#STRING='###'
#STRING='\*[A-Z]{3}:\t.*xxx xxx'
#STRING='\*[A-Z]{3}:\t.*like'
#STRING='%gls:\t.*xxx xxx'
#STRING='%gls:\t.*\[\.\.\.\]'
#STRING='\*[A-Z]{3}:\t.*cym&eng1'
#STRING='%gls:\t.*past (one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve)'
#STRING='%com'
#STRING='@Comment'
# STRING='o \(y\)n'
# STRING='be.IM[^\+SM]'
STRING='yn rhaid'
#STRING='\*[A-Z]{3}:\t.*deg_(un|dau|tri|pedwar|pump|chwech|saith|naw)'
#STRING='\*[A-Z]{3}:\t.*\(er\)s talwm'
#STRING='%gls:\t.*in_range'
#STRING='\*[A-Z]{3}:\t.*genod'
#STRING='\*[A-Z]{3}:\t.*pedwar_deg_pump'
#STRING='\*[A-Z]{3}:\t.* .[^A-Z]+@s:eng&spa.*@s:eng .*'
#STRING='\*[A-Z]{3}:\t.* .[^A-Z]*@s:cym&spa.*@s:spa .*'
#STRING='\*[A-Z]{3}:\t.*foreclosure'
#STRING='\*[A-Z]{3}:\t.*ar ddeg'





# English files in tiers with a Spanish precode
#STRING='\*[A-Z]{3}:\t.*\[- spa\].*[[:blank:]]mmhm@s:eng&spa'

# Spanish files in tiers with an English precode
#STRING='\*[A-Z]{3}:\t.*\[- eng\].*[[:blank:]]mmhm@s:eng&spa'

# Files in tiers without precodes
#STRING='\*[A-Z]{3}:\t.*[[:blank:]]okay'


for f in $FILES
do
	# If using grep, uncomment the following lines:
	#filename=$(basename $f)  # the filename from the path - file.cha
	#path=$(dirname $f)  # the path to the file - path/to
	#fixedfile=${filename%.cha}  # switch the filename's extension to .txt for the output file - file.txt
	#grep -n "$STRING" $f /dev/null # -n inserts the line number in the output
	#if [ "$?" = "0"  ] ; then  # if there is output (0) from the grep ...
	#echo "in: $fixedfile\n"  # ...  give the name of the file on the next line
	#fi  # An alternative to this if statement is to append /dev/null to the grep line; this means grep will get at least 2 file arguments, effectively forcing it to print the filename if it happens to match the pattern. However, grep then prints the filename on the same line as the text, and for every match, which is not elegant.
	ack-grep "$STRING" $f /dev/null  # /dev/null passes 2 file-arguments to ack, forcing it to print the filename if it happens to match the pattern.  The filenames are printed in green above all matches in that file.
	# -Cx gives lines of context on either side of the match.
	#ack-grep '^%eng' $f /dev/null | ack-grep 'eisteddfod' 
	#ack-grep '^\*[A-Z]' $f /dev/null | ack-grep "$STRING" 
done



























