#!/bin/sh

#/* 
#*********************************************************************
#Copyright Kevin Donnelly 2010, 2011.
#kevindonnelly.org.uk
#This file is part of the Bangor Autoglosser.
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License and the GNU
#Affero General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option)
#any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#and the GNU Affero General Public License along with this program.
#If not, see <http://www.gnu.org/licenses/>.
#*********************************************************************
#*/ 

# This script runs PostgreSQL stuff.

FILES=inputs/siarad/beta/*.cha

for f in $FILES
do
	echo "Processing $f ..."
	
	filename=$(basename $f)
	fixedfile=${filename%.cha}
	cgutterances=${fixedfile}_cgutterances
	cgwords=${fixedfile}_cgwords
	diana=${fixedfile}_diana
	nuked=${fixedfile}_cgwords_nuked

# 	# -------------------------------------------------
# 	# Get total number of utterances
# 	# -------------------------------------------------
# 
# 	utt=${fixedfile}_cgutterances
# 
# 	# http://www.postgresql.org/docs/current/static/app-psql.html
# # psql -h localhost -U kevin -d autoglosser -q -c "select count(*) from davies9_cgutterances" would be the simplest form, using -c to implement the SQL command, but in this case we also want to run some formatting commands (ie mix SQL and psql meta-commands), so the only way to do this is to pipe the complete command into psql using echo.
# 	# \pset tuples_only (= \t) strips the format headings and \pset format unaligned (= \a)strips the tabs alignment from the output.
# 	# Note that if you are using the short forms, you need an additional backslash to escape the first backslash.
# 	# -q tells it to give the result quietly, ie without any info about the output.
# 	# We need an additional backslash to escape the separator meta-command \\.
# 	
# 	myno=$(echo '\\a \\t \\\ select count(*) from ' $utt | psql -h localhost -U kevin -d autoglosser -q)
# 	echo "$fixedfile:" $myno
# 	
# 	total=$(($total+$myno))
# 	echo  "Total so far:" $total "\n"


# 	# -------------------------------------------------
# 	# Get total number of words
# 	# -------------------------------------------------
# 
# 	words=${fixedfile}_cgwords
# 
# 	# Note the need for an additional single quote at the end of the WHERE clause, matching the initial quote.
# 	
# 	myno=$(echo '\\a \\t \\\ select count(*) from ' $words ' where langid !='\'999\''' | psql -h localhost -U kevin -d autoglosser -q)
# 	echo "$fixedfile:" $myno
# 	
# 	total=$(($total+$myno))
# 	echo  "Total so far:" $total "\n"


# 	# -------------------------------------------------
# 	# Get total duration of utterances
# 	# -------------------------------------------------
# 	# This gets the total duration of utterances for a particular speaker.
# 	# Note the use of escaped single quotes to allow the search item in the WHERE clause.
# 
# 	utt=${fixedfile}_cgutterances
# 	
# 	myno=$(echo '\\a \\t \\\ select sum((duration)::integer) from '$utt' where speaker='\'MAR\'' group by speaker' | psql -h localhost -U kevin -d autoglosser -q)
# 	echo "$fixedfile:" $myno
# 
# 	total=$(($total+$myno))
# 	echo  "Total so far:" $total "\n"


# 	# -------------------------------------------------
# 	# Combine the number of utterances containing more than one clause
# 	# -------------------------------------------------
# 
# 	myno=$(echo '\\a \\t \\\ select count(utterance_id) from clause_length2 where filename='\'$fixedfile\'' and length > 0;' | psql -h localhost -U kevin -d autoglosser -q)
# 	echo "$fixedfile:" $myno
# 	
# 	total=$(($total+$myno))
# 	echo  "Total so far:" $total "\n"


# 	# -------------------------------------------------
# 	# Update the langid on all _cgwords tables
# 	# -------------------------------------------------
# 
# 	words=${fixedfile}_cgwords
# 	psql -h localhost -U kevin -d autoglosser -q -c "update $words set langid='cym' where langid~'^cy$';"


# 	# -------------------------------------------------
# 	# Find instances of Ã¢ without a to bach
# 	# -------------------------------------------------
# 
# 	utt=${fixedfile}_cgutterances
# 	words=${fixedfile}_cgwords
# 	echo '\\a \\t \\\ select filename, surface from '$utt' where utterance_id in (select utterance_id from '$words' where surface='\'a\'' and gls='\'with\'');' | psql -h localhost -U kevin -d autoglosser -q >> siaradtrans/a_tobach.txt
	
	
# 	# -------------------------------------------------
# 	# Find location of missing sound-bullets
# 	# -------------------------------------------------
# 
# 	utt=${fixedfile}_cgutterances
# 	
# 	echo $fixedfile >> miamitrans/missing_sound_bullets.txt
# 	echo "-------------------" >> miamitrans/missing_sound_bullets.txt
# 
# 	echo '\\a \\t \\\ select utterance_id, surface from '$utt' where durbegin=0 and durend=0 and speaker='\'MAR\'' order by utterance_id;' | psql -h localhost -U kevin -d autoglosser -q >> miamitrans/missing_sound_bullets.txt
# 
# 	echo "\n"  >> miamitrans/missing_sound_bullets.txt


#	# -------------------------------------------------
#	# Combine the data from the utterances tables into one table
#	# -------------------------------------------------

# Run this first to create the table:
# CREATE TABLE corpsiar/corppat ( 
#	 	utterance_id integer,
#		filename character varying(50),
#	 	speaker character varying(10),
#	 	surface text,
#	 	english text,
#		welsh text
# );
# 
	
# 	CREATE TABLE corpcig2 ( 
# 		utterance_id integer,
# 		filename character varying(20),
# 		speaker character varying(3),
# 		surface text
# 	);

# 	psql -h localhost -U kevin -d autoglosser -q -c "insert into corpsiar select utterance_id, filename, speaker, surface, eng from $cgutterances where precode!='eng' order by utterance_id;"
	
# 	psql -h localhost -U kevin -d autoglosser -q -c "insert into corppat select utterance_id, filename, speaker, surface, eng from $cgutterances where precode!='spa' order by utterance_id;"
	
# 	psql -h localhost -U kevin -d cig1 -q -c "insert into corpcig1 select utterance_id, filename, speaker, surface from $cgutterances order by filename, utterance_id;"


# 	# -------------------------------------------------
# 	# Combine the data from the mixedmodel tables into one table
# 	# -------------------------------------------------
# 
# 	# Run php cognates/create_mixedmodel_jumbo.php first to create the table.
# 
# 	mixedmodel=${fixedfile}_mixedmodel
# 	psql -h localhost -U kevin -d autoglosser -q -c "insert into mixedmodel_jumbo select * from $mixedmodel order by mm_id;"


# 	# -------------------------------------------------
# 	# Combine the data from the mirjam tables into one table
# 	# -------------------------------------------------
# 
# 	# Run php cognates/create_mixedmodel_jumbo.php first to create the table, BUT CHANGE THE TABLE NAME to mixedmodel_jumbo_mirjam
# 
# 	mirjam=${fixedfile}_mirjam
# 	psql -h localhost -U kevin -d autoglosser -q -c "insert into mixedmodel_jumbo_mirjam select * from $mirjam order by mm_id;"


# 	# -------------------------------------------------
# 	# Combine the data from the cognates csvs into one table
# 	# -------------------------------------------------
# 
# 	# Run php cognates/create_rbrul.php first to create the table.
# 
# 	mixedmodel=${fixedfile}_mixedmodel
# 	psql -h localhost -U kevin -d autoglosser -q -c "insert into mixedmodel_jumbo select * from $mixedmodel order by mm_id;"


# 	# -------------------------------------------------
# 	# Collect instances of English insertions
# 	# -------------------------------------------------
# 
# 	# Create the table by "create table ... as select from ..." and then emptying the table.
# 
# 	psql -h localhost -U kevin -d autoglosser -q -c "insert into insertions_all select slotlg, clause_id,  utterance_id, filename, surface, auto, verblg, langid, speaker from $diana where slotlg ~ '2' order by slotlg;"


# 	# -------------------------------------------------
# 	# Combine the data from the diana tables into one table
# 	# -------------------------------------------------
# 
# 	# Create the table by "create table ... as select from ..." and then emptying the table.
# 
# 	psql -h localhost -U kevin -d autoglosser -q -c "insert into jumbo_margaret_siarad select * from $diana order by clause_id;"


# 	# -------------------------------------------------
# 	# Combine the data from the mixedmodel tables into one table (Margaret)
# 	# -------------------------------------------------
# 
# 	# Create the table by "create table ... as select from ..." and then emptying the table.
# 
# 	mixedmodel=${fixedfile}_mixedmodel
# 	mixedmodel=${fixedfile}_mirjam
# 	psql -h localhost -U kevin -d autoglosser -q -c "insert into jumbo_margaret_siarad_mixedmodel select * from $mixedmodel order by mm_id;"

	
done
