#!/bin/sh

#/* 
#*********************************************************************
#Copyright Kevin Donnelly 2010, 2011.
#kevindonnelly.org.uk
#This file is part of the Bangor Autoglosser.
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License and the GNU
#Affero General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option)
#any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#and the GNU Affero General Public License along with this program.
#If not, see <http://www.gnu.org/licenses/>.
#*********************************************************************
#*/ 

# This script uses perl to fix all instances of a particular string in all the files in the corpus.  Sed is also a (slightly faster) option, but the drawback is that it's regex implementation is not the standard PCRE one.
FILES=inputs/miami/beta/*.cha
#FILES=inputs/miami/beta/herring6_tab.cha

# REMEMBER TO ESCAPE & ON THE REPLACEMENT SIDE!!!

for f in $FILES
do
	echo "Processing $f ..."
	#sed -i "/\*[A-Z]/s/ar \(\(draws|goll\)\) /ar_\1 /g" $f
	#sed -i "/\*[A-Z]/s/\([[:space:]]\)oh /\1o@s:cym\&spa /g" $f
	#sed -i "/\*[A-Z]/s/\([ <]\)neud/\1wneud/g" $f 
	#sed -i "/\*[A-Z]/s/ i \([mf]\)ewn/ i_\1ewn/g" $f 
	#perl -pi -e 's/([[:blank:]])i ((ffwrdd|fyny|lawr|gyd)) /\1i_\2 /g' $f
	#perl -pi -e 's/([[:blank:]]yn) ((ystod) )/\1_\2/g' $f
	#perl -pi -e 's/([[:blank:]])hanodd /\1&h anodd /g' $f
	#perl -pi -e 's/([[:space:]])o@s:cym&spa /\1oh@s:cym&spa /g' $f
	#sed -i "/\*[A-Z]/s/\([[:blank:]]\)mmhm@s:cym\&spa /\1mmhm /g" $f
	#sed -i "/\*[A-Z]/s/o hyd/o_hyd/g" $f
	#sed -i "/\*[A-Z]/s/#/(.)/g" $f
	
	#Tidying Miami begins
	#sed -i "s/%en:/%eng:/g" $f
	#sed -i "s/%eng:[[:blank:]]*/%eng:\o011/g" $f
	#sed -i 'N;s/\(@Comment.*\n\)%eng:\o011vvv/\1/;P;D;' $f
	#sed -i '/^$/ d' $f
	#Tidying Miami ends
	
	#sed -i 's/\[!= *\(.*\)\]/[=! \1]/g' $f
	#sed -i 's/\[\[:blank:\]\]office@s:eng/ office@s:eng/g' $f
	#sed -i 's/\([A-Z]\)\[or\]\([a-z]\)/\1 [or] \2/g' $f
	#sed -i 's/: :continue//g' $f
	#sed -i 's/ADV\.:STILL:/ADV/g' $f
	#sed -i 's/\((\.*)\)\( *\)\(\[\/*\]\)/\3 \1/g' $f
	#sed -ri 's/(@ID.*\|\|)$/\1|/g' $f
	#sed -ri 's/aw@s:cym&spa/oh@s:cym\&spa/g' $f
	#sed -ri '/%aut/s/thing\.N\.M\.SG\+SM -ever\.ADJ/anyway.ADV/g' $f
	
	####
	# run the following in sequence
	# run gather_by_language to move Spanish files into a spa sub-folder
	
	# change in English files in tiers with a Spanish precode
	#sed -ri '/\*[A-Z].*\[- spa\]/s/([[:blank:]])um@s:eng&spa/\1um@s:eng/g' $f
	
	# change in English files in tiers without a Spanish precode
	#sed -ri '/\*[A-Z].*/s/([[:blank:]])mmhm@s:eng&spa/\1mmhm/g' $f
	
	# change the FILES reference to refer to the spa sub-folder
	# change in Spanish files in tiers with an English precode
	#sed -ri '/\*[A-Z].*\[- eng\]/s/([[:blank:]])um@s:eng&spa/\1um@s:eng/g' $f
	
	# change in Spanish files in tiers without an English precode
	#sed -ri '/\*[A-Z].*/s/([[:blank:]])mmhm@s:eng&spa/\1mmhm@s:eng/g' $f
	####
	
	#sed -ri '/\*[A-Z].*/s/([[:blank:]])&= /\1\&=/g' $f

	#sed -ri "s/:\o011\o011/:\o011/g" $f
	#sed -ri "s/  / /g" $f
	#sed -ri "s/([[:blank:]])ww([[:blank:]])/\1www\2/g" $f

	#sed -ri '/@Transcriber/s/Original translation/Initial translation/g' $f
	#sed -ri '/@Media/s/0([0-9])/\1/g' $f
	#sed -ri '/@Media/s/Patagonia/patagonia/g' $f
	#sed -ri '/\*[A-Z]/s/([a-z])(\?|!)/\1 \2/g' $f
	
	# Open quote
	#sed -ri '/%eng/s/"//' $f
	# Close quote
	#sed -ri '/%eng/s/"//' $f
	
	# New-style quotes in the speaker tier
	sed -ri '/\*[A-Z].*/s/([[:blank:]])"([[A-Za-z].[^"]*[a-z])"([[:blank:]])/\1“\2”\3/' $f
	
done

#  In theory, perl is easier to use than sed, but the invocation above doesn't seem to work sometimes.

























