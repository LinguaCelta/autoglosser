<?php
/***
 * Merge Results from Online and Offline Tasks
 *
 * This script merges the CSV files generated by the OpenSesame experiment for
 * the online task with the data typed up from the offline task and the survey
 * on participant's background data via the background_data.php and
 * offline_results.php scripts. Merged results are stored in an SQLite database.
 *
 * PHP Version 5.3
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License or the GNU
 * Affero General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option)
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * and the GNU Affero General Public License along with this program.
 * If not, see <http://www.gnu.org/licenses/>.
 *
 * @author     Florian Breit <florian.breit.12@ucl.ac.uk>
 * @copyright  2012 Florian Breit
 * @version    1.0.0
 * @package    BangorAutoglosser
 * @license    http://www.gnu.org/licenses/gpl.html
 * @license    http://www.gnu.org/licenses/agpl.html
 */


//
// SETUP
//

//Some PHP stuff
error_reporting(E_ALL);
ini_set('display_errors', 1);

//Paths
$results_path = './';
$db_path = './judgement_data.sqlite';

//
// MAIN SCRIPT
//

//Set up and flush database
$fh = @fopen($db_path, 'w'); //Flushes DB
if( $fh === false ) {
    die("\nError: Could not open file "
        ."`$db_path' for writing.");
}
fclose($fh);
$db = new SQLite3($db_path, SQLITE3_OPEN_READWRITE);
$result = $db->exec("CREATE TABLE participants
                        (
                            p_id            INTEGER PRIMARY KEY,
                            p_code          TEXT,
                            p_age           INTEGER,
                            p_gender        INTEGER,
                            p_education     INTEGER,
                            p_wherefrom     TEXT,
                            p_southnorth    INTEGER
                        );
                     CREATE TABLE results
                        (
                            p_id            INTEGER,
                            s_id            INTEGER,
                            s_cond          INTEGER,
                            s_duration      INTEGER,
                            r_on_response   INTEGER,
                            r_on_rtime      INTEGER,
                            r_off_rating    INTEGER
                        );
                    ");

//Scan results directory (directory with the CSV files)
$dir = scandir($results_path);
//Walk through files and insert their contents into db
foreach($dir as $file) {
    //Only files starting with "subject" such as "subject-abc1.csv"
    if( substr($file, 0, 7) == 'subject' ) {
        //Find code for relevant files (subject-xxxx.csv -> xxxx)
        $code = substr($file, 8, 4);
        print "$code\n";
        
        //Read data from all files with $code
        $online_data = read_csv($results_path."/subject-$code.csv");
        $offline_data = read_csv($results_path."/offline-$code.csv");
        //$offline_train = read_csv($results_path."/offline-train-$code.csv");
        $background_data =read_csv($results_path."/background-$code.csv");
        //Add data to database
        
        //Add participant background data
        $stmt = $db->prepare('INSERT INTO participants
                                (
                                    p_code,
                                    p_age,
                                    p_gender,
                                    p_education,
                                    p_wherefrom,
                                    p_southnorth
                                )
                                VALUES
                                (
                                    :p_code,
                                    :p_age,
                                    :p_gender,
                                    :p_education,
                                    :p_wherefrom,
                                    :p_southnorth
                                )
                             ');
        $age = $background_data[1][0];
        $gender = $background_data[1][1];
        $education = $background_data[1][2];
        $wherefrom = $background_data[1][3];
        $southnorth = $background_data[1][4];
        $stmt->reset();
        $stmt->bindValue(':p_code',         $code);
        $stmt->bindValue(':p_age',          $age);
        $stmt->bindValue(':p_gender',       $gender);
        $stmt->bindValue(':p_education',    $education);
        $stmt->bindValue(':p_wherefrom',    $wherefrom);
        $stmt->bindValue(':p_southnorth',   $southnorth);
        $stmt->execute();
        $p_id = $db->lastInsertRowID();
        
        //Add online results
        $stmt = $db->prepare('INSERT INTO results
                                (
                                    p_id,
                                    s_id,
                                    s_cond,
                                    s_duration,
                                    r_on_response,
                                    r_on_rtime
                                )
                                VALUES
                                (
                                    :p_id,
                                    :s_id,
                                    :s_cond,
                                    :s_duration,
                                    :r_on_response,
                                    :r_on_rtime
                                );
                             ');
        for($i=1;$i<count($online_data);$i++) {
            //ignore training data
            if( substr($online_data[$i][2], 0, 5) == 'TRAIN' ) {
                continue;
            }
            if($online_data[$i][0] == 'oa') {
                $cond = 1;
            } else {
                $cond = 2;
            }
            $dur = $online_data[$i][1];
            $id = $online_data[$i][3];
            if($online_data[$i][4] == 'z' ) {
                $resp = 1;
            } elseif($online_data[$i][4] == 'm' ) {
                $resp = 2;
            } else {
                $resp = null;
            }
            $rt = $online_data[$i][5];
            if($rt == 'timeout') {
                $rt = null;
            }
            $stmt->reset();
            $stmt->bindValue(':p_id',           $p_id);
            $stmt->bindValue(':s_id',           $id);
            $stmt->bindValue(':s_cond',         $cond);
            $stmt->bindValue(':s_duration',     $dur);
            $stmt->bindValue(':r_on_response',  $resp);
            $stmt->bindValue(':r_on_rtime',     $rt);
            $stmt->execute();
        }
        
        //Add offline results
        $stmt = $db->prepare('UPDATE results
                                SET
                                    r_off_rating = :r_off_rating
                                WHERE
                                    p_id = :p_id
                                    AND
                                    s_id = :s_id
                                    AND
                                    s_cond = :s_cond                                
                             ');
        for($i=1;$i<count($offline_data);$i++) {
            $s_id = $offline_data[$i][0];
            if($s_id === '0') {
                $s_id = '9'; //correct for programming error
            }
            $s_cond = $offline_data[$i][1];
            if($s_cond == 'oa') {
                $s_cond = 1;
            } else {
                $s_cond = 2;
            }
            $r_off_rating = $offline_data[$i][2];
            if(!is_numeric($r_off_rating)) {
                $r_off_rating = null;
            }
            $stmt->reset();
            $stmt->bindValue(':p_id',           $p_id);
            $stmt->bindValue(':r_off_rating',   $r_off_rating);
            $stmt->bindValue(':s_id',           $s_id);
            $stmt->bindValue(':s_cond',         $s_cond);
            $stmt->execute();
        }
    }
}

//Create data views in the database
$result = $db->exec('CREATE VIEW
                        combined
                     AS
                        SELECT
                            participants.p_id,
                            p_age,
                            p_gender,
                            p_education,
                            p_southnorth,
                            s_id,
                            s_cond,
                            s_duration,
                            r_on_response,
                            r_on_rtime,
                            r_off_rating
                        FROM
                            participants,
                            results
                        WHERE
                            participants.p_id = results.p_id
                    ;');
$result = $db->exec('CREATE VIEW
                        combined_per_sentence
                     AS
                        SELECT
                            s_id,
                            s_cond,
                            round(avg(r_on_response), 2)
                                AS avg_on_response,
                            round(avg(r_on_rtime), 2)
                                AS avg_on_rtime,
                            round(avg(r_on_rtime-s_duration), 2)
                                AS avg_on_score,
                            round(avg(r_off_rating), 2)
                                AS avg_off_rating
                        FROM
                            results
                        GROUP BY
                            s_id,
                            s_cond
                    ;');

//
// FUNCTIONS
//

/***
 * Read CSV file into array
 *
 * This function reads the specified CSV file, using the optionally defined
 * separator (default `,') and using quotations to assign fields (default `"').
 * The function returns a two-dimensional array containing the rows and fields
 * present in the CSV file. An empty array is returned if the CSV file is empty.
 *
 * @param string $file Path to the CSV file to be read
 * @param string $sep Separator for fields, default `,'
 * @param string $trim Characters to be trimmed from either side of fields
 * @return array Returns a two-dimensional array representing rows and columns
 */
function read_csv($file, $sep=',', $trim='"') {
    $lines = file($file);
    foreach($lines as $key => $line) {
        $line = trim($line);
        $quot = false;
        $line = csv_explode($sep, $line);
        foreach($line as $index => $value) {
            $line[$index] = trim($value, $trim);
        }
        $lines[$key] = $line;
    }
    return $lines;
}

/***
 * Explode CSV line into Array
 *
 * This function takes a line from a typical CSV file and separates it into an
 * array using the given separator, much like explode(). However it ignores any
 * occurences of the separator inside double quotation marks (`"').
 *
 * @param string $sep The separator to be used
 * @param string $line The CSV line to be parsed
 * @return array Returns an array with the individual fields in the CSV line
 */
function csv_explode($sep, $line) {
    $return = array();
    $cell_count = 0;
    $return[0] = '';
    $quot = false;
    for($i=0;$i<strlen($line);$i++) {
        if($quot) {
            if($line[$i] == '"') {
                $quot = false;
            } else {
                //ignore sep until unquoting
                $return[$cell_count] .= $line[$i];
            }
        } else {
            if($line[$i] == '"') {
                $quot = true;
            } else {
                if($line[$i] == $sep) {
                    $cell_count++;
                    $return[$cell_count] = '';
                } else {
                    $return[$cell_count] .= $line[$i];
                }
            }
        }
    }
    return $return;
}
?>
